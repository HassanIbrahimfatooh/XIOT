
XIOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00001d3e  00001dd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080009c  0080009c  00001e0e  2**0
                  ALLOC
  3 .stab         00001974  00000000  00000000  00001e10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f74  00000000  00000000  00003784  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000046f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000049a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000065f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000074dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000828c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000083ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008679  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008e47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 0a 	call	0x155c	; 0x155c <main>
      8a:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e9       	ldi	r26, 0x93	; 147
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e9       	ldi	r24, 0x93	; 147
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer0_Void_Clear>:
 */

#include "../all-includes.h"

// Clear Timer interrupt function
extern void Timer0_Void_Clear(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	 TIMSK : Timer Interrupt Mask Register
	 TIMSK = 0bxxxxxx10;
	 */

	// Bit0 : TOIE0 : Timer/Counter0 Overflow interrupt Enable : Enabled in Normal  Mode only
	Clr_Bit(TIMSK, 0);
     b4e:	a9 e5       	ldi	r26, 0x59	; 89
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e9 e5       	ldi	r30, 0x59	; 89
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8e 7f       	andi	r24, 0xFE	; 254
     b5a:	8c 93       	st	X, r24

	// Bit1 : OCIE0 : Timer/Counter0 Output compare match Interrupt Enable : Enabled in Compare match Mode only
	Clr_Bit(TIMSK, 1);
     b5c:	a9 e5       	ldi	r26, 0x59	; 89
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e9 e5       	ldi	r30, 0x59	; 89
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8d 7f       	andi	r24, 0xFD	; 253
     b68:	8c 93       	st	X, r24

} // End of Timer0_Void_Clear
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <Timer0_Void_Initialize_NormalMode>:

// Timer in Normal Mode
extern void Timer0_Void_Initialize_NormalMode(void) {
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
	 TCNT0 : Timer Counter Register
	 It counts from 0 to 255 in Normal Mode
	 */

	// initialize counter to start from 0
	TCNT0 = 0;
     b78:	e2 e5       	ldi	r30, 0x52	; 82
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	10 82       	st	Z, r1
	 TCCR0 : Timer Counter Control Register
	 TCCR0 = 0b00000101;
	 */

	// Bit 7 : FOC0 : Force Output Compare : This bit is only active when specifies a Non PWM mode
	Clr_Bit(TCCR0, 7);
     b7e:	a3 e5       	ldi	r26, 0x53	; 83
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e3 e5       	ldi	r30, 0x53	; 83
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	8f 77       	andi	r24, 0x7F	; 127
     b8a:	8c 93       	st	X, r24

	// Bit 6:3 : WGM01:0 : WaveForm generation mode
	// WGM01:0 : 00 : Timer counter works in Normal Mode
	Clr_Bit(TCCR0, 6);
     b8c:	a3 e5       	ldi	r26, 0x53	; 83
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	e3 e5       	ldi	r30, 0x53	; 83
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	8f 7b       	andi	r24, 0xBF	; 191
     b98:	8c 93       	st	X, r24
	Clr_Bit(TCCR0, 3);
     b9a:	a3 e5       	ldi	r26, 0x53	; 83
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e3 e5       	ldi	r30, 0x53	; 83
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	87 7f       	andi	r24, 0xF7	; 247
     ba6:	8c 93       	st	X, r24

	// Bit 4:5 : COM01:0 : Compare Match output mode
	// Com01:0 : 00 : Timer counter works in Normal Mode : OC0 is disconnected
	Clr_Bit(TCCR0, 4);
     ba8:	a3 e5       	ldi	r26, 0x53	; 83
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e3 e5       	ldi	r30, 0x53	; 83
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	8f 7e       	andi	r24, 0xEF	; 239
     bb4:	8c 93       	st	X, r24
	Clr_Bit(TCCR0, 5);
     bb6:	a3 e5       	ldi	r26, 0x53	; 83
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e3 e5       	ldi	r30, 0x53	; 83
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	8f 7d       	andi	r24, 0xDF	; 223
     bc2:	8c 93       	st	X, r24

	// Bit 2:0 : CS02:0 : Clock Select : Pre-scaler
	// CS01:0 : 100 : 256 Pre-scaler
	Set_Bit(TCCR0, 2);
     bc4:	a3 e5       	ldi	r26, 0x53	; 83
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e3 e5       	ldi	r30, 0x53	; 83
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	84 60       	ori	r24, 0x04	; 4
     bd0:	8c 93       	st	X, r24
	Clr_Bit(TCCR0, 1);
     bd2:	a3 e5       	ldi	r26, 0x53	; 83
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e3 e5       	ldi	r30, 0x53	; 83
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	8d 7f       	andi	r24, 0xFD	; 253
     bde:	8c 93       	st	X, r24
	Clr_Bit(TCCR0, 0);
     be0:	a3 e5       	ldi	r26, 0x53	; 83
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e3 e5       	ldi	r30, 0x53	; 83
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8e 7f       	andi	r24, 0xFE	; 254
     bec:	8c 93       	st	X, r24
	 TIMSK : Timer Interrupt Mask Register
	 TIMSK = 0bxxxxxx01;
	 */

	// Bit0 : TOIE0 : Timer/Counter0 Overflow interrupt Enable : Enabled in Normal  Mode only
	Set_Bit(TIMSK, 0);
     bee:	a9 e5       	ldi	r26, 0x59	; 89
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e9 e5       	ldi	r30, 0x59	; 89
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	81 60       	ori	r24, 0x01	; 1
     bfa:	8c 93       	st	X, r24

	// Bit1 : OCIE0 : Timer/Counter0 Output compare match Interrupt Enable : Enabled in Compare match Mode only
	Clr_Bit(TIMSK, 1);
     bfc:	a9 e5       	ldi	r26, 0x59	; 89
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e9 e5       	ldi	r30, 0x59	; 89
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	8d 7f       	andi	r24, 0xFD	; 253
     c08:	8c 93       	st	X, r24
	 TIFR : Timer Interrupt Flag Register
	 TIFR = 0bxxxxxx01;
	 */

	// Bit0 : TOV0 : Timer/Counter0 Overflow Flag : Enabled in Normal  Mode only
	Set_Bit(TIFR, 0);
     c0a:	a8 e5       	ldi	r26, 0x58	; 88
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e8 e5       	ldi	r30, 0x58	; 88
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	81 60       	ori	r24, 0x01	; 1
     c16:	8c 93       	st	X, r24

	// Bit1 : OCF0 : Timer/Counter0 Output compare match Flag : Enabled in Compare match Mode only
	Clr_Bit(TIFR, 1);
     c18:	a8 e5       	ldi	r26, 0x58	; 88
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e8 e5       	ldi	r30, 0x58	; 88
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8d 7f       	andi	r24, 0xFD	; 253
     c24:	8c 93       	st	X, r24

} // End of Timer0_Void_Initialize_NormalMode
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <Timer0_Void_Initialize_CompareMatchMode>:

// Timer in Compare match Mode
extern void Timer0_Void_Initialize_CompareMatchMode(void) {
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
	// 4000000         :    1 second
	// 4000000 / 256   :    1 second
	// 15625           :    1 second
	// 15625 / 200 = 78.125
	// Each 78.125 count will generate interrupt request
	OCR0 = 200;
     c34:	ec e5       	ldi	r30, 0x5C	; 92
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	88 ec       	ldi	r24, 0xC8	; 200
     c3a:	80 83       	st	Z, r24
	 TCNT0 : Timer Counter Register
	 It counts from 0 to 255 in Normal Mode
	 */

	// initialize counter to start from 0
	TCNT0 = 0;
     c3c:	e2 e5       	ldi	r30, 0x52	; 82
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	10 82       	st	Z, r1
	 TCCR0 : Timer Counter Control Register
	 TCCR0 = 0b00001101;
	 */

	// Bit 7 : FOC0 : Force Output Compare : This bit is only active when specifies a Non PWM mode
	Clr_Bit(TCCR0, 7);
     c42:	a3 e5       	ldi	r26, 0x53	; 83
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e3 e5       	ldi	r30, 0x53	; 83
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	8f 77       	andi	r24, 0x7F	; 127
     c4e:	8c 93       	st	X, r24

	// Bit 6:3 : WGM01:0 : WaveForm generation mode
	// WGM01:0 : 10 : Timer counter works in Compare Match Mode
	Clr_Bit(TCCR0, 6);
     c50:	a3 e5       	ldi	r26, 0x53	; 83
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e3 e5       	ldi	r30, 0x53	; 83
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	8f 7b       	andi	r24, 0xBF	; 191
     c5c:	8c 93       	st	X, r24
	Set_Bit(TCCR0, 3);
     c5e:	a3 e5       	ldi	r26, 0x53	; 83
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e3 e5       	ldi	r30, 0x53	; 83
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	88 60       	ori	r24, 0x08	; 8
     c6a:	8c 93       	st	X, r24

	// Bit 4:5 : COM01:0 : Compare Match output mode
	// Com01:0 : 00 : Timer counter works in Normal Mode : OC0 is disconnected
	Clr_Bit(TCCR0, 4);
     c6c:	a3 e5       	ldi	r26, 0x53	; 83
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e3 e5       	ldi	r30, 0x53	; 83
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	8f 7e       	andi	r24, 0xEF	; 239
     c78:	8c 93       	st	X, r24
	Clr_Bit(TCCR0, 5);
     c7a:	a3 e5       	ldi	r26, 0x53	; 83
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e3 e5       	ldi	r30, 0x53	; 83
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	8f 7d       	andi	r24, 0xDF	; 223
     c86:	8c 93       	st	X, r24

	// Bit 2:0 : CS02:0 : Clock Select : PRE-scaler
	// CS01:0 : 100 : 256 PRE-scaler
	Set_Bit(TCCR0, 2);
     c88:	a3 e5       	ldi	r26, 0x53	; 83
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e3 e5       	ldi	r30, 0x53	; 83
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	84 60       	ori	r24, 0x04	; 4
     c94:	8c 93       	st	X, r24
	Clr_Bit(TCCR0, 1);
     c96:	a3 e5       	ldi	r26, 0x53	; 83
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e3 e5       	ldi	r30, 0x53	; 83
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	8d 7f       	andi	r24, 0xFD	; 253
     ca2:	8c 93       	st	X, r24
	Clr_Bit(TCCR0, 0);
     ca4:	a3 e5       	ldi	r26, 0x53	; 83
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e3 e5       	ldi	r30, 0x53	; 83
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	8e 7f       	andi	r24, 0xFE	; 254
     cb0:	8c 93       	st	X, r24
	 TIMSK : Timer Interrupt Mask Register
	 TIMSK = 0bxxxxxx10;
	 */

	// Bit0 : TOIE0 : Timer/Counter0 Overflow interrupt Enable : Enabled in Normal  Mode only
	Clr_Bit(TIMSK, 0);
     cb2:	a9 e5       	ldi	r26, 0x59	; 89
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e9 e5       	ldi	r30, 0x59	; 89
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8e 7f       	andi	r24, 0xFE	; 254
     cbe:	8c 93       	st	X, r24

	// Bit1 : OCIE0 : Timer/Counter0 Output compare match Interrupt Enable : Enabled in Compare match Mode only
	Set_Bit(TIMSK, 1);
     cc0:	a9 e5       	ldi	r26, 0x59	; 89
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e9 e5       	ldi	r30, 0x59	; 89
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	82 60       	ori	r24, 0x02	; 2
     ccc:	8c 93       	st	X, r24
	 TIFR : Timer Interrupt Flag Register
	 TIFR = 0bxxxxxx10;
	 */

	// Bit0 : TOV0 : Timer/Counter0 Overflow Flag : Enabled in Normal  Mode only
	Clr_Bit(TIFR, 0);
     cce:	a8 e5       	ldi	r26, 0x58	; 88
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e8 e5       	ldi	r30, 0x58	; 88
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	8e 7f       	andi	r24, 0xFE	; 254
     cda:	8c 93       	st	X, r24

	// Bit1 : OCF0 : Timer/Counter0 Output compare match Flag : Enabled in Compare match Mode only
	Set_Bit(TIFR, 1);
     cdc:	a8 e5       	ldi	r26, 0x58	; 88
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e8 e5       	ldi	r30, 0x58	; 88
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	82 60       	ori	r24, 0x02	; 2
     ce8:	8c 93       	st	X, r24

} // End of Timer0_Void_Initialize_CompareMatchMode
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <Timer0_Void_Initialize_PWMmode>:

// Timer in PWM Mode
extern void Timer0_Void_Initialize_PWMmode(u16 duty_cycle) {
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <Timer0_Void_Initialize_PWMmode+0x6>
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	9a 83       	std	Y+2, r25	; 0x02
     cfc:	89 83       	std	Y+1, r24	; 0x01
	 */

	// Initialize Output Compare register (OCR0)
	// 255 / 2 = 128
	// if OCR0 = 128 : Half speed
	OCR0 = (duty_cycle / 100) * 255;
     cfe:	ec e5       	ldi	r30, 0x5C	; 92
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	9a 81       	ldd	r25, Y+2	; 0x02
     d06:	24 e6       	ldi	r18, 0x64	; 100
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	b9 01       	movw	r22, r18
     d0c:	0e 94 ad 0b 	call	0x175a	; 0x175a <__udivmodhi4>
     d10:	cb 01       	movw	r24, r22
     d12:	ac 01       	movw	r20, r24
     d14:	ca 01       	movw	r24, r20
     d16:	9c 01       	movw	r18, r24
     d18:	22 0f       	add	r18, r18
     d1a:	33 1f       	adc	r19, r19
     d1c:	c9 01       	movw	r24, r18
     d1e:	96 95       	lsr	r25
     d20:	98 2f       	mov	r25, r24
     d22:	88 27       	eor	r24, r24
     d24:	97 95       	ror	r25
     d26:	87 95       	ror	r24
     d28:	82 1b       	sub	r24, r18
     d2a:	93 0b       	sbc	r25, r19
     d2c:	84 0f       	add	r24, r20
     d2e:	95 1f       	adc	r25, r21
     d30:	80 83       	st	Z, r24
	 TCCR0 : Timer Counter Control Register
	 TCCR0 = 0b00000101;
	 */

	// Bit 7 : FOC0 : Force Output Compare : This bit is only active when specifies a Non PWM mode
	Set_Bit(TCCR0, 7);
     d32:	a3 e5       	ldi	r26, 0x53	; 83
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e3 e5       	ldi	r30, 0x53	; 83
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	80 68       	ori	r24, 0x80	; 128
     d3e:	8c 93       	st	X, r24

	// Bit 6:3 : WGM01:0 : WaveForm generation mode
	// WGM01:0 : 00 : Timer counter works in Normal Mode
	Set_Bit(TCCR0, 6);
     d40:	a3 e5       	ldi	r26, 0x53	; 83
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e3 e5       	ldi	r30, 0x53	; 83
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	80 64       	ori	r24, 0x40	; 64
     d4c:	8c 93       	st	X, r24
	Set_Bit(TCCR0, 3);
     d4e:	a3 e5       	ldi	r26, 0x53	; 83
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e3 e5       	ldi	r30, 0x53	; 83
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	88 60       	ori	r24, 0x08	; 8
     d5a:	8c 93       	st	X, r24

	// Bit 4:5 : COM01:0 : Compare Match output mode
	// Com01:0 : 00 : Timer counter works in Normal Mode : OC0 is disconnected
	Clr_Bit(TCCR0, 4);
     d5c:	a3 e5       	ldi	r26, 0x53	; 83
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e3 e5       	ldi	r30, 0x53	; 83
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8f 7e       	andi	r24, 0xEF	; 239
     d68:	8c 93       	st	X, r24
	Set_Bit(TCCR0, 5);
     d6a:	a3 e5       	ldi	r26, 0x53	; 83
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e3 e5       	ldi	r30, 0x53	; 83
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	80 62       	ori	r24, 0x20	; 32
     d76:	8c 93       	st	X, r24

	// Bit 2:0 : CS02:0 : Clock Select : Pre-scaler
	// CS01:0 : 100 : 256 Pre-scaler
	Clr_Bit(TCCR0, 2);
     d78:	a3 e5       	ldi	r26, 0x53	; 83
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e3 e5       	ldi	r30, 0x53	; 83
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	8b 7f       	andi	r24, 0xFB	; 251
     d84:	8c 93       	st	X, r24
	Set_Bit(TCCR0, 1);
     d86:	a3 e5       	ldi	r26, 0x53	; 83
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e3 e5       	ldi	r30, 0x53	; 83
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	82 60       	ori	r24, 0x02	; 2
     d92:	8c 93       	st	X, r24
	Clr_Bit(TCCR0, 0);
     d94:	a3 e5       	ldi	r26, 0x53	; 83
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e3 e5       	ldi	r30, 0x53	; 83
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	8e 7f       	andi	r24, 0xFE	; 254
     da0:	8c 93       	st	X, r24

	// Clearing older timer modes
	Timer0_Void_Clear();
     da2:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer0_Void_Clear>

} // End of Timer0_Void_Initialize_NormalMode
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <ExternalInterrupt_voidInitialzie>:
 */

#include "../all-includes.h"

// A function that Enables the interrupt Registers
void ExternalInterrupt_voidInitialzie() {
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
	 */

	// Bit 7 : INT1 : External interrupts request 1
	// Bit 6 : INT0 : External interrupts request 0
	// Bit 5 : INT2 : External interrupts request 2
	Set_Bit(GICR, 6);
     db8:	ab e5       	ldi	r26, 0x5B	; 91
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	eb e5       	ldi	r30, 0x5B	; 91
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	80 64       	ori	r24, 0x40	; 64
     dc4:	8c 93       	st	X, r24
	 MCUCR : MCU Control Register
	 Bits 0:3 : Interrupt sense Control
	 */

	// Bits 0:1 : INT0 : 11 : The rising edge of INT0 generates an interrupt request
	Set_Bit(MCUCR, 0);
     dc6:	a5 e5       	ldi	r26, 0x55	; 85
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e5 e5       	ldi	r30, 0x55	; 85
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	81 60       	ori	r24, 0x01	; 1
     dd2:	8c 93       	st	X, r24
	Set_Bit(MCUCR, 1);
     dd4:	a5 e5       	ldi	r26, 0x55	; 85
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e5 e5       	ldi	r30, 0x55	; 85
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	82 60       	ori	r24, 0x02	; 2
     de0:	8c 93       	st	X, r24
	/*
	 SREG : status Register
	 */

	// Enabling Global Interrupt
	Set_Bit(SREG, 7);
     de2:	af e5       	ldi	r26, 0x5F	; 95
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	ef e5       	ldi	r30, 0x5F	; 95
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	80 68       	ori	r24, 0x80	; 128
     dee:	8c 93       	st	X, r24

}
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <Sei>:

// Enabling Global interrupt flag
void Sei() {
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
	/*
	 SREG : status Register
	 */
	// Enabling Global Interrupt
	Set_Bit(SREG, 7);
     dfe:	af e5       	ldi	r26, 0x5F	; 95
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	ef e5       	ldi	r30, 0x5F	; 95
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	80 68       	ori	r24, 0x80	; 128
     e0a:	8c 93       	st	X, r24

}
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <Cli>:

// Disabling Global interrupt flag
void Cli() {
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
	/*
	 SREG : status Register
	 */
	// Enabling Global Interrupt
	Clr_Bit(SREG, 7);
     e1a:	af e5       	ldi	r26, 0x5F	; 95
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ef e5       	ldi	r30, 0x5F	; 95
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8f 77       	andi	r24, 0x7F	; 127
     e26:	8c 93       	st	X, r24

}
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <__vector_1>:

#include "../all-includes.h"

extern u8 flag;

ISR (INT0_vect) {
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	// Toggling The first bit into flag variable
	Toggle_Bit(flag, 0);
     e44:	80 91 9c 00 	lds	r24, 0x009C
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	89 27       	eor	r24, r25
     e4c:	80 93 9c 00 	sts	0x009C, r24
}
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	9f 91       	pop	r25
     e56:	8f 91       	pop	r24
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	0f 90       	pop	r0
     e5e:	1f 90       	pop	r1
     e60:	18 95       	reti

00000e62 <Switch_Function>:
 *      Author: ihass
 */

#include "../all-includes.h"

u8 Switch_Function(u8 pin) {
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	00 d0       	rcall	.+0      	; 0xe68 <Switch_Function+0x6>
     e68:	00 d0       	rcall	.+0      	; 0xe6a <Switch_Function+0x8>
     e6a:	0f 92       	push	r0
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	8d 83       	std	Y+5, r24	; 0x05
	u8 Switch = 0;
     e72:	1c 82       	std	Y+4, r1	; 0x04
	u8 Old_Value = 0;
     e74:	1b 82       	std	Y+3, r1	; 0x03
	u8 Current_Value = 0;
     e76:	1a 82       	std	Y+2, r1	; 0x02
	u8 Counter;

	Current_Value = DIO_ReadPin(pin);
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	0e 94 c6 09 	call	0x138c	; 0x138c <DIO_ReadPin>
     e7e:	8a 83       	std	Y+2, r24	; 0x02
     e80:	0b c0       	rjmp	.+22     	; 0xe98 <Switch_Function+0x36>

	while (Counter <= 10) {

		if (Old_Value == Current_Value) {
     e82:	9b 81       	ldd	r25, Y+3	; 0x03
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	98 17       	cp	r25, r24
     e88:	21 f4       	brne	.+8      	; 0xe92 <Switch_Function+0x30>
			Counter++;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	8f 5f       	subi	r24, 0xFF	; 255
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <Switch_Function+0x32>
		} else {
			Counter = 0;
     e92:	19 82       	std	Y+1, r1	; 0x01
		}

		Old_Value = Current_Value;
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	8b 83       	std	Y+3, r24	; 0x03
	u8 Current_Value = 0;
	u8 Counter;

	Current_Value = DIO_ReadPin(pin);

	while (Counter <= 10) {
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	8b 30       	cpi	r24, 0x0B	; 11
     e9c:	90 f3       	brcs	.-28     	; 0xe82 <Switch_Function+0x20>
		}

		Old_Value = Current_Value;
	}

	Switch = Current_Value;
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	8c 83       	std	Y+4, r24	; 0x04

	return Switch;
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <DIO_Void_SetPinDirection>:
/* This function is to check if the pin is INPUT or OUTPUT
 * So i need to know two things :
 * 1- What #Pin will be set ? --> So i defined (u8PinNumber) Variable
 * 2- What #Direction will be set (OUTPUT or INPUT) ? -->  So i defined (u8PinDirection) Variable   */
extern void DIO_Void_SetPinDirection ( u8 u8PinNumber  , u8 u8PinDirection )
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <DIO_Void_SetPinDirection+0x6>
     eba:	00 d0       	rcall	.+0      	; 0xebc <DIO_Void_SetPinDirection+0x8>
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	8b 83       	std	Y+3, r24	; 0x03
     ec2:	6c 83       	std	Y+4, r22	; 0x04
	u8 Port,Pin;
	Port = u8PinNumber /8 ;
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	86 95       	lsr	r24
     ec8:	86 95       	lsr	r24
     eca:	86 95       	lsr	r24
     ecc:	8a 83       	std	Y+2, r24	; 0x02
	Pin  = u8PinNumber %8 ;
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	87 70       	andi	r24, 0x07	; 7
     ed2:	89 83       	std	Y+1, r24	; 0x01
	if (Port == 0)
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	88 23       	and	r24, r24
     ed8:	81 f5       	brne	.+96     	; 0xf3a <DIO_Void_SetPinDirection+0x86>
	{
		Assign_Bit(DDRA,Pin,u8PinDirection);
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	88 23       	and	r24, r24
     ede:	a9 f4       	brne	.+42     	; 0xf0a <DIO_Void_SetPinDirection+0x56>
     ee0:	aa e3       	ldi	r26, 0x3A	; 58
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	ea e3       	ldi	r30, 0x3A	; 58
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_Void_SetPinDirection+0x4a>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_Void_SetPinDirection+0x46>
     f02:	80 95       	com	r24
     f04:	84 23       	and	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	af c0       	rjmp	.+350    	; 0x1068 <DIO_Void_SetPinDirection+0x1b4>
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	09 f0       	breq	.+2      	; 0xf12 <DIO_Void_SetPinDirection+0x5e>
     f10:	ab c0       	rjmp	.+342    	; 0x1068 <DIO_Void_SetPinDirection+0x1b4>
     f12:	aa e3       	ldi	r26, 0x3A	; 58
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ea e3       	ldi	r30, 0x3A	; 58
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_Void_SetPinDirection+0x7c>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_Void_SetPinDirection+0x78>
     f34:	84 2b       	or	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	97 c0       	rjmp	.+302    	; 0x1068 <DIO_Void_SetPinDirection+0x1b4>
	}

	else if (Port == 1)
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	81 f5       	brne	.+96     	; 0xfa0 <DIO_Void_SetPinDirection+0xec>
	{
		Assign_Bit(DDRB,Pin,u8PinDirection);
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	88 23       	and	r24, r24
     f44:	a9 f4       	brne	.+42     	; 0xf70 <DIO_Void_SetPinDirection+0xbc>
     f46:	a7 e3       	ldi	r26, 0x37	; 55
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e7 e3       	ldi	r30, 0x37	; 55
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_Void_SetPinDirection+0xb0>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_Void_SetPinDirection+0xac>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	7c c0       	rjmp	.+248    	; 0x1068 <DIO_Void_SetPinDirection+0x1b4>
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	09 f0       	breq	.+2      	; 0xf78 <DIO_Void_SetPinDirection+0xc4>
     f76:	78 c0       	rjmp	.+240    	; 0x1068 <DIO_Void_SetPinDirection+0x1b4>
     f78:	a7 e3       	ldi	r26, 0x37	; 55
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e7 e3       	ldi	r30, 0x37	; 55
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_Void_SetPinDirection+0xe2>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_Void_SetPinDirection+0xde>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	64 c0       	rjmp	.+200    	; 0x1068 <DIO_Void_SetPinDirection+0x1b4>
	}

	else if (Port == 2)
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	81 f5       	brne	.+96     	; 0x1006 <DIO_Void_SetPinDirection+0x152>
	{
		Assign_Bit(DDRC,Pin,u8PinDirection);
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	88 23       	and	r24, r24
     faa:	a9 f4       	brne	.+42     	; 0xfd6 <DIO_Void_SetPinDirection+0x122>
     fac:	a4 e3       	ldi	r26, 0x34	; 52
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e4 e3       	ldi	r30, 0x34	; 52
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_Void_SetPinDirection+0x116>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_Void_SetPinDirection+0x112>
     fce:	80 95       	com	r24
     fd0:	84 23       	and	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	49 c0       	rjmp	.+146    	; 0x1068 <DIO_Void_SetPinDirection+0x1b4>
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	09 f0       	breq	.+2      	; 0xfde <DIO_Void_SetPinDirection+0x12a>
     fdc:	45 c0       	rjmp	.+138    	; 0x1068 <DIO_Void_SetPinDirection+0x1b4>
     fde:	a4 e3       	ldi	r26, 0x34	; 52
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e4 e3       	ldi	r30, 0x34	; 52
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_Void_SetPinDirection+0x148>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_Void_SetPinDirection+0x144>
    1000:	84 2b       	or	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	31 c0       	rjmp	.+98     	; 0x1068 <DIO_Void_SetPinDirection+0x1b4>
	}

	else if (Port == 3)
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	83 30       	cpi	r24, 0x03	; 3
    100a:	71 f5       	brne	.+92     	; 0x1068 <DIO_Void_SetPinDirection+0x1b4>
	{
		Assign_Bit(DDRD,Pin,u8PinDirection);
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	88 23       	and	r24, r24
    1010:	a9 f4       	brne	.+42     	; 0x103c <DIO_Void_SetPinDirection+0x188>
    1012:	a1 e3       	ldi	r26, 0x31	; 49
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e1 e3       	ldi	r30, 0x31	; 49
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_Void_SetPinDirection+0x17c>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_Void_SetPinDirection+0x178>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	16 c0       	rjmp	.+44     	; 0x1068 <DIO_Void_SetPinDirection+0x1b4>
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	99 f4       	brne	.+38     	; 0x1068 <DIO_Void_SetPinDirection+0x1b4>
    1042:	a1 e3       	ldi	r26, 0x31	; 49
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e1 e3       	ldi	r30, 0x31	; 49
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_Void_SetPinDirection+0x1ac>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_Void_SetPinDirection+0x1a8>
    1064:	84 2b       	or	r24, r20
    1066:	8c 93       	st	X, r24
	}

}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <DIO_Void_WritePin>:

/* If the function was OUTPUT, Then i need to know two things :
 * 1- What #Pin will be set as OUTPUT ? --> So i defined (u8PinNumber) Variable
 * 2- What #Value will be set as OUTPUT (0V or 5V) ? -->  So i defined (u8PinValue) Variable */
extern void DIO_Void_WritePin ( u8 u8PinNumber , u8 u8PinValue )
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <DIO_Void_WritePin+0x6>
    107c:	00 d0       	rcall	.+0      	; 0x107e <DIO_Void_WritePin+0x8>
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	8b 83       	std	Y+3, r24	; 0x03
    1084:	6c 83       	std	Y+4, r22	; 0x04
	u8 Port,Pin;
	Port = u8PinNumber /8 ;
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	86 95       	lsr	r24
    108a:	86 95       	lsr	r24
    108c:	86 95       	lsr	r24
    108e:	8a 83       	std	Y+2, r24	; 0x02
	Pin  = u8PinNumber %8 ;
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	87 70       	andi	r24, 0x07	; 7
    1094:	89 83       	std	Y+1, r24	; 0x01
	if (Port == 0)
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	88 23       	and	r24, r24
    109a:	81 f5       	brne	.+96     	; 0x10fc <DIO_Void_WritePin+0x86>
	{
		Assign_Bit(PORTA,Pin,u8PinValue);
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	88 23       	and	r24, r24
    10a0:	a9 f4       	brne	.+42     	; 0x10cc <DIO_Void_WritePin+0x56>
    10a2:	ab e3       	ldi	r26, 0x3B	; 59
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	eb e3       	ldi	r30, 0x3B	; 59
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_Void_WritePin+0x4a>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_Void_WritePin+0x46>
    10c4:	80 95       	com	r24
    10c6:	84 23       	and	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	af c0       	rjmp	.+350    	; 0x122a <DIO_Void_WritePin+0x1b4>
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <DIO_Void_WritePin+0x5e>
    10d2:	ab c0       	rjmp	.+342    	; 0x122a <DIO_Void_WritePin+0x1b4>
    10d4:	ab e3       	ldi	r26, 0x3B	; 59
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	eb e3       	ldi	r30, 0x3B	; 59
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_Void_WritePin+0x7c>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_Void_WritePin+0x78>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	97 c0       	rjmp	.+302    	; 0x122a <DIO_Void_WritePin+0x1b4>
	}

	else if (Port == 1)
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	81 f5       	brne	.+96     	; 0x1162 <DIO_Void_WritePin+0xec>
	{
		Assign_Bit(PORTB,Pin,u8PinValue);
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	88 23       	and	r24, r24
    1106:	a9 f4       	brne	.+42     	; 0x1132 <DIO_Void_WritePin+0xbc>
    1108:	a8 e3       	ldi	r26, 0x38	; 56
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e8 e3       	ldi	r30, 0x38	; 56
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_Void_WritePin+0xb0>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_Void_WritePin+0xac>
    112a:	80 95       	com	r24
    112c:	84 23       	and	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	7c c0       	rjmp	.+248    	; 0x122a <DIO_Void_WritePin+0x1b4>
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	09 f0       	breq	.+2      	; 0x113a <DIO_Void_WritePin+0xc4>
    1138:	78 c0       	rjmp	.+240    	; 0x122a <DIO_Void_WritePin+0x1b4>
    113a:	a8 e3       	ldi	r26, 0x38	; 56
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e8 e3       	ldi	r30, 0x38	; 56
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_Void_WritePin+0xe2>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_Void_WritePin+0xde>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	64 c0       	rjmp	.+200    	; 0x122a <DIO_Void_WritePin+0x1b4>
	}

	else if (Port == 2)
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	81 f5       	brne	.+96     	; 0x11c8 <DIO_Void_WritePin+0x152>
	{
		Assign_Bit(PORTC,Pin,u8PinValue);
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	88 23       	and	r24, r24
    116c:	a9 f4       	brne	.+42     	; 0x1198 <DIO_Void_WritePin+0x122>
    116e:	a5 e3       	ldi	r26, 0x35	; 53
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e5 e3       	ldi	r30, 0x35	; 53
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <DIO_Void_WritePin+0x116>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <DIO_Void_WritePin+0x112>
    1190:	80 95       	com	r24
    1192:	84 23       	and	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	49 c0       	rjmp	.+146    	; 0x122a <DIO_Void_WritePin+0x1b4>
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	09 f0       	breq	.+2      	; 0x11a0 <DIO_Void_WritePin+0x12a>
    119e:	45 c0       	rjmp	.+138    	; 0x122a <DIO_Void_WritePin+0x1b4>
    11a0:	a5 e3       	ldi	r26, 0x35	; 53
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e5 e3       	ldi	r30, 0x35	; 53
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_Void_WritePin+0x148>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_Void_WritePin+0x144>
    11c2:	84 2b       	or	r24, r20
    11c4:	8c 93       	st	X, r24
    11c6:	31 c0       	rjmp	.+98     	; 0x122a <DIO_Void_WritePin+0x1b4>
	}

	else if (Port == 3)
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	71 f5       	brne	.+92     	; 0x122a <DIO_Void_WritePin+0x1b4>
	{
		Assign_Bit(PORTD,Pin,u8PinValue);
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	88 23       	and	r24, r24
    11d2:	a9 f4       	brne	.+42     	; 0x11fe <DIO_Void_WritePin+0x188>
    11d4:	a2 e3       	ldi	r26, 0x32	; 50
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e2 e3       	ldi	r30, 0x32	; 50
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_Void_WritePin+0x17c>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_Void_WritePin+0x178>
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	16 c0       	rjmp	.+44     	; 0x122a <DIO_Void_WritePin+0x1b4>
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	99 f4       	brne	.+38     	; 0x122a <DIO_Void_WritePin+0x1b4>
    1204:	a2 e3       	ldi	r26, 0x32	; 50
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e2 e3       	ldi	r30, 0x32	; 50
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_Void_WritePin+0x1ac>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_Void_WritePin+0x1a8>
    1226:	84 2b       	or	r24, r20
    1228:	8c 93       	st	X, r24
	}

}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <DIO_Void_WriteHighNibble>:

/* To set the High Nibble of a Port */
extern void DIO_Void_WriteHighNibble ( u8 Port , u8 u8PinValue )
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <DIO_Void_WriteHighNibble+0x6>
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	6a 83       	std	Y+2, r22	; 0x02
//	u8 Port,Pin;
//	Port = u8PinNumber /8 ;
//	Pin  = u8PinNumber %8 ;
	if (Port == 0)
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	88 23       	and	r24, r24
    124a:	99 f4       	brne	.+38     	; 0x1272 <DIO_Void_WriteHighNibble+0x3a>
	{
		Assign_High_Nibble(PORTA,u8PinValue);
    124c:	ab e3       	ldi	r26, 0x3B	; 59
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	eb e3       	ldi	r30, 0x3B	; 59
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	28 2f       	mov	r18, r24
    1258:	2f 70       	andi	r18, 0x0F	; 15
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	82 95       	swap	r24
    1262:	92 95       	swap	r25
    1264:	90 7f       	andi	r25, 0xF0	; 240
    1266:	98 27       	eor	r25, r24
    1268:	80 7f       	andi	r24, 0xF0	; 240
    126a:	98 27       	eor	r25, r24
    126c:	82 2b       	or	r24, r18
    126e:	8c 93       	st	X, r24
    1270:	41 c0       	rjmp	.+130    	; 0x12f4 <DIO_Void_WriteHighNibble+0xbc>
	}

	else if (Port == 1)
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	99 f4       	brne	.+38     	; 0x129e <DIO_Void_WriteHighNibble+0x66>
	{
		Assign_High_Nibble(PORTB,u8PinValue);
    1278:	a8 e3       	ldi	r26, 0x38	; 56
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e8 e3       	ldi	r30, 0x38	; 56
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	28 2f       	mov	r18, r24
    1284:	2f 70       	andi	r18, 0x0F	; 15
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	82 95       	swap	r24
    128e:	92 95       	swap	r25
    1290:	90 7f       	andi	r25, 0xF0	; 240
    1292:	98 27       	eor	r25, r24
    1294:	80 7f       	andi	r24, 0xF0	; 240
    1296:	98 27       	eor	r25, r24
    1298:	82 2b       	or	r24, r18
    129a:	8c 93       	st	X, r24
    129c:	2b c0       	rjmp	.+86     	; 0x12f4 <DIO_Void_WriteHighNibble+0xbc>
	}

	else if (Port == 2)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	82 30       	cpi	r24, 0x02	; 2
    12a2:	99 f4       	brne	.+38     	; 0x12ca <DIO_Void_WriteHighNibble+0x92>
	{
		Assign_High_Nibble(PORTC,u8PinValue);
    12a4:	a5 e3       	ldi	r26, 0x35	; 53
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e3       	ldi	r30, 0x35	; 53
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	28 2f       	mov	r18, r24
    12b0:	2f 70       	andi	r18, 0x0F	; 15
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	82 95       	swap	r24
    12ba:	92 95       	swap	r25
    12bc:	90 7f       	andi	r25, 0xF0	; 240
    12be:	98 27       	eor	r25, r24
    12c0:	80 7f       	andi	r24, 0xF0	; 240
    12c2:	98 27       	eor	r25, r24
    12c4:	82 2b       	or	r24, r18
    12c6:	8c 93       	st	X, r24
    12c8:	15 c0       	rjmp	.+42     	; 0x12f4 <DIO_Void_WriteHighNibble+0xbc>
	}

	else if (Port == 3)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	83 30       	cpi	r24, 0x03	; 3
    12ce:	91 f4       	brne	.+36     	; 0x12f4 <DIO_Void_WriteHighNibble+0xbc>
	{
		Assign_High_Nibble(PORTD,u8PinValue);
    12d0:	a2 e3       	ldi	r26, 0x32	; 50
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e2 e3       	ldi	r30, 0x32	; 50
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	28 2f       	mov	r18, r24
    12dc:	2f 70       	andi	r18, 0x0F	; 15
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	82 95       	swap	r24
    12e6:	92 95       	swap	r25
    12e8:	90 7f       	andi	r25, 0xF0	; 240
    12ea:	98 27       	eor	r25, r24
    12ec:	80 7f       	andi	r24, 0xF0	; 240
    12ee:	98 27       	eor	r25, r24
    12f0:	82 2b       	or	r24, r18
    12f2:	8c 93       	st	X, r24
	}

}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <DIO_Void_WriteLowNibble>:


/* To set the Low Nibble of a Port */
extern void DIO_Void_WriteLowNibble ( u8 Port , u8 u8PinValue )
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	00 d0       	rcall	.+0      	; 0x1304 <DIO_Void_WriteLowNibble+0x6>
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	6a 83       	std	Y+2, r22	; 0x02
//	u8 Port,Pin;
//	Port = u8PinNumber /8 ;
//	Pin  = u8PinNumber %8 ;
	if (Port == 0)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	88 23       	and	r24, r24
    1310:	61 f4       	brne	.+24     	; 0x132a <DIO_Void_WriteLowNibble+0x2c>
	{
		Assign_Low_Nibble(PORTA,u8PinValue);
    1312:	ab e3       	ldi	r26, 0x3B	; 59
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	eb e3       	ldi	r30, 0x3B	; 59
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	98 2f       	mov	r25, r24
    131e:	90 7f       	andi	r25, 0xF0	; 240
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	8f 70       	andi	r24, 0x0F	; 15
    1324:	89 2b       	or	r24, r25
    1326:	8c 93       	st	X, r24
    1328:	2c c0       	rjmp	.+88     	; 0x1382 <DIO_Void_WriteLowNibble+0x84>
	}

	else if (Port == 1)
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	61 f4       	brne	.+24     	; 0x1348 <DIO_Void_WriteLowNibble+0x4a>
	{
		Assign_Low_Nibble(PORTB,u8PinValue);
    1330:	a8 e3       	ldi	r26, 0x38	; 56
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e8 e3       	ldi	r30, 0x38	; 56
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	98 2f       	mov	r25, r24
    133c:	90 7f       	andi	r25, 0xF0	; 240
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	8f 70       	andi	r24, 0x0F	; 15
    1342:	89 2b       	or	r24, r25
    1344:	8c 93       	st	X, r24
    1346:	1d c0       	rjmp	.+58     	; 0x1382 <DIO_Void_WriteLowNibble+0x84>
	}

	else if (Port == 2)
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	82 30       	cpi	r24, 0x02	; 2
    134c:	61 f4       	brne	.+24     	; 0x1366 <DIO_Void_WriteLowNibble+0x68>
	{
		Assign_Low_Nibble(PORTC,u8PinValue);
    134e:	a5 e3       	ldi	r26, 0x35	; 53
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e5 e3       	ldi	r30, 0x35	; 53
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	98 2f       	mov	r25, r24
    135a:	90 7f       	andi	r25, 0xF0	; 240
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	8f 70       	andi	r24, 0x0F	; 15
    1360:	89 2b       	or	r24, r25
    1362:	8c 93       	st	X, r24
    1364:	0e c0       	rjmp	.+28     	; 0x1382 <DIO_Void_WriteLowNibble+0x84>
	}

	else if (Port == 3)
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	59 f4       	brne	.+22     	; 0x1382 <DIO_Void_WriteLowNibble+0x84>
	{
		Assign_Low_Nibble(PORTD,u8PinValue);
    136c:	a2 e3       	ldi	r26, 0x32	; 50
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e2 e3       	ldi	r30, 0x32	; 50
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	98 2f       	mov	r25, r24
    1378:	90 7f       	andi	r25, 0xF0	; 240
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	8f 70       	andi	r24, 0x0F	; 15
    137e:	89 2b       	or	r24, r25
    1380:	8c 93       	st	X, r24
	}

}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <DIO_ReadPin>:

/* If the function was INPUT, Then i just need to know one thing :
 * #The number of Pin That i will read from it --> So i defined (u8PinNumber) Variable */
extern u8  DIO_ReadPin ( u8 u8PinNumber )
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <DIO_ReadPin+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <DIO_ReadPin+0x8>
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	8c 83       	std	Y+4, r24	; 0x04
	u8 Port, Pin, x;
	Port = u8PinNumber /8 ;
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	86 95       	lsr	r24
    139e:	86 95       	lsr	r24
    13a0:	86 95       	lsr	r24
    13a2:	8b 83       	std	Y+3, r24	; 0x03
	Pin  = u8PinNumber %8 ;
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	87 70       	andi	r24, 0x07	; 7
    13a8:	8a 83       	std	Y+2, r24	; 0x02

	if (Port == 0)
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	88 23       	and	r24, r24
    13ae:	91 f4       	brne	.+36     	; 0x13d4 <DIO_ReadPin+0x48>
	{
		x= Get_Bit(PINA,Pin);
    13b0:	e9 e3       	ldi	r30, 0x39	; 57
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	88 2f       	mov	r24, r24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_ReadPin+0x3c>
    13c4:	55 95       	asr	r21
    13c6:	47 95       	ror	r20
    13c8:	8a 95       	dec	r24
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_ReadPin+0x38>
    13cc:	ca 01       	movw	r24, r20
    13ce:	81 70       	andi	r24, 0x01	; 1
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	3e c0       	rjmp	.+124    	; 0x1450 <DIO_ReadPin+0xc4>
	}

	else if (Port == 1)
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	91 f4       	brne	.+36     	; 0x13fe <DIO_ReadPin+0x72>
	{
		x= Get_Bit(PINB,Pin);
    13da:	e6 e3       	ldi	r30, 0x36	; 54
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a9 01       	movw	r20, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <DIO_ReadPin+0x66>
    13ee:	55 95       	asr	r21
    13f0:	47 95       	ror	r20
    13f2:	8a 95       	dec	r24
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <DIO_ReadPin+0x62>
    13f6:	ca 01       	movw	r24, r20
    13f8:	81 70       	andi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	29 c0       	rjmp	.+82     	; 0x1450 <DIO_ReadPin+0xc4>
	}

	else if (Port == 2)
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	91 f4       	brne	.+36     	; 0x1428 <DIO_ReadPin+0x9c>
	{
		x= Get_Bit(PINC,Pin);
    1404:	e3 e3       	ldi	r30, 0x33	; 51
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a9 01       	movw	r20, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_ReadPin+0x90>
    1418:	55 95       	asr	r21
    141a:	47 95       	ror	r20
    141c:	8a 95       	dec	r24
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_ReadPin+0x8c>
    1420:	ca 01       	movw	r24, r20
    1422:	81 70       	andi	r24, 0x01	; 1
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	14 c0       	rjmp	.+40     	; 0x1450 <DIO_ReadPin+0xc4>
	}

	else if (Port == 3)
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	83 30       	cpi	r24, 0x03	; 3
    142c:	89 f4       	brne	.+34     	; 0x1450 <DIO_ReadPin+0xc4>
	{
		x= Get_Bit(PIND,Pin);
    142e:	e0 e3       	ldi	r30, 0x30	; 48
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a9 01       	movw	r20, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_ReadPin+0xba>
    1442:	55 95       	asr	r21
    1444:	47 95       	ror	r20
    1446:	8a 95       	dec	r24
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_ReadPin+0xb6>
    144a:	ca 01       	movw	r24, r20
    144c:	81 70       	andi	r24, 0x01	; 1
    144e:	89 83       	std	Y+1, r24	; 0x01
	}

	return x;
    1450:	89 81       	ldd	r24, Y+1	; 0x01

}
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <ADC_voidInitializeADC>:
 *      Author: ihass
 */

#include "../all-includes.h"

extern void ADC_voidInitializeADC(void) {
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
	 ADMUX = 0b01100001;
	 */

	// Bit 7:6 - REFS1:0: Reference Selection Bits
	// REFS1:0    REFS0:1     : AVCC With external capacitor at AREF pin
	Clr_Bit(ADMUX, 7);
    1468:	a7 e2       	ldi	r26, 0x27	; 39
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e7 e2       	ldi	r30, 0x27	; 39
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	8f 77       	andi	r24, 0x7F	; 127
    1474:	8c 93       	st	X, r24
	Set_Bit(ADMUX, 6);
    1476:	a7 e2       	ldi	r26, 0x27	; 39
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e7 e2       	ldi	r30, 0x27	; 39
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	80 64       	ori	r24, 0x40	; 64
    1482:	8c 93       	st	X, r24

	// Bit 5 - ADLAR : ADC Left Adjust Result
	// Making this bit 1 will make Left Adjust to the Register
	Set_Bit(ADMUX, 5);
    1484:	a7 e2       	ldi	r26, 0x27	; 39
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e7 e2       	ldi	r30, 0x27	; 39
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	80 62       	ori	r24, 0x20	; 32
    1490:	8c 93       	st	X, r24

	// Bits 4:0 - Mux4:0 : Analog channel and gain selection Bits
	// MUX4:0  : 00001 : ADC1
	Clr_Bit(ADMUX, 4);
    1492:	a7 e2       	ldi	r26, 0x27	; 39
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e7 e2       	ldi	r30, 0x27	; 39
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8f 7e       	andi	r24, 0xEF	; 239
    149e:	8c 93       	st	X, r24
	Clr_Bit(ADMUX, 3);
    14a0:	a7 e2       	ldi	r26, 0x27	; 39
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e7 e2       	ldi	r30, 0x27	; 39
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	87 7f       	andi	r24, 0xF7	; 247
    14ac:	8c 93       	st	X, r24
	Clr_Bit(ADMUX, 2);
    14ae:	a7 e2       	ldi	r26, 0x27	; 39
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e7 e2       	ldi	r30, 0x27	; 39
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	8b 7f       	andi	r24, 0xFB	; 251
    14ba:	8c 93       	st	X, r24
	Clr_Bit(ADMUX, 1);
    14bc:	a7 e2       	ldi	r26, 0x27	; 39
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e7 e2       	ldi	r30, 0x27	; 39
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8d 7f       	andi	r24, 0xFD	; 253
    14c8:	8c 93       	st	X, r24
	Set_Bit(ADMUX, 0);
    14ca:	a7 e2       	ldi	r26, 0x27	; 39
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e7 e2       	ldi	r30, 0x27	; 39
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	81 60       	ori	r24, 0x01	; 1
    14d6:	8c 93       	st	X, r24
	 ADCSRA : ADC Control and Status Register
	 ADCSRA = 0b10000011;
	 */

	// Bit 7 : ADEN : ADC Enable
	Set_Bit(ADCSRA, 7);		// ADCSRA=0b10000000;
    14d8:	a6 e2       	ldi	r26, 0x26	; 38
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e6 e2       	ldi	r30, 0x26	; 38
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 68       	ori	r24, 0x80	; 128
    14e4:	8c 93       	st	X, r24

	// ADC Enable and Prescaler of 8
	// 1000000 / 8 = 125000
	Set_Bit(ADCSRA, 2);
    14e6:	a6 e2       	ldi	r26, 0x26	; 38
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e6 e2       	ldi	r30, 0x26	; 38
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	84 60       	ori	r24, 0x04	; 4
    14f2:	8c 93       	st	X, r24
	Set_Bit(ADCSRA, 1);
    14f4:	a6 e2       	ldi	r26, 0x26	; 38
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e6 e2       	ldi	r30, 0x26	; 38
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	82 60       	ori	r24, 0x02	; 2
    1500:	8c 93       	st	X, r24
	Set_Bit(ADCSRA, 0);
    1502:	a6 e2       	ldi	r26, 0x26	; 38
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e6 e2       	ldi	r30, 0x26	; 38
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	81 60       	ori	r24, 0x01	; 1
    150e:	8c 93       	st	X, r24

}
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <ADC_u8ReadADC>:

extern u8 ADC_u8ReadADC(void) {
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62

	// Bit 6 : ADSC : ADC Start conversion
	Set_Bit(ADCSRA, 6);
    151e:	a6 e2       	ldi	r26, 0x26	; 38
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e6 e2       	ldi	r30, 0x26	; 38
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	80 64       	ori	r24, 0x40	; 64
    152a:	8c 93       	st	X, r24

	// Bit 4 : ADIF : ADC Interrupt Flag ( Polling on the ADC Interrupt Flag )
	while (Get_Bit(ADCSRA,4) == 0) {
    152c:	e6 e2       	ldi	r30, 0x26	; 38
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	82 95       	swap	r24
    1534:	8f 70       	andi	r24, 0x0F	; 15
    1536:	88 2f       	mov	r24, r24
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	81 70       	andi	r24, 0x01	; 1
    153c:	90 70       	andi	r25, 0x00	; 0
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	a9 f3       	breq	.-22     	; 0x152c <ADC_u8ReadADC+0x16>
		// Do Nothing
	};

	// Bit 4 : This bit is set when an ADC conversion completes and the data registers are updated
	// Clearing the ADC flag by writing logical one
	Set_Bit(ADCSRA, 4);
    1542:	a6 e2       	ldi	r26, 0x26	; 38
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e6 e2       	ldi	r30, 0x26	; 38
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	80 61       	ori	r24, 0x10	; 16
    154e:	8c 93       	st	X, r24

	// Return ADCH value
	return ADCH;
    1550:	e5 e2       	ldi	r30, 0x25	; 37
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
}
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <main>:
#include "all-includes.h"

// Initializing Global Variables
u8 flag = 0;

int main() {
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	2f 97       	sbiw	r28, 0x0f	; 15
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61

	// Initializing Local Variables
	u8 adcREAD;

	// Initializing PORTS
	DDRB = 0x0f;
    1574:	e7 e3       	ldi	r30, 0x37	; 55
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	8f e0       	ldi	r24, 0x0F	; 15
    157a:	80 83       	st	Z, r24
	DDRC = 0xff;
    157c:	e4 e3       	ldi	r30, 0x34	; 52
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	8f ef       	ldi	r24, 0xFF	; 255
    1582:	80 83       	st	Z, r24

	// Initializing ADC
	ADC_voidInitializeADC();
    1584:	0e 94 30 0a 	call	0x1460	; 0x1460 <ADC_voidInitializeADC>

	// Initializing External interrupt
	ExternalInterrupt_voidInitialzie();
    1588:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <ExternalInterrupt_voidInitialzie>
    158c:	c8 c0       	rjmp	.+400    	; 0x171e <main+0x1c2>

	while (1) {

		while (flag == 0) {

			PORTB = 0x00;
    158e:	e8 e3       	ldi	r30, 0x38	; 56
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	10 82       	st	Z, r1
			// Reading the value of variable resistor
			adcREAD = ADC_u8ReadADC();
    1594:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ADC_u8ReadADC>
    1598:	8f 87       	std	Y+15, r24	; 0x0f
			PORTC = adcREAD;
    159a:	e5 e3       	ldi	r30, 0x35	; 53
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a0:	80 83       	st	Z, r24
			// Assigning Higher Nibble
			Assign_High_Nibble(PORTC, (adcREAD * 5) / 255);
    15a2:	05 e3       	ldi	r16, 0x35	; 53
    15a4:	10 e0       	ldi	r17, 0x00	; 0
    15a6:	e5 e3       	ldi	r30, 0x35	; 53
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	4f 70       	andi	r20, 0x0F	; 15
    15b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	c9 01       	movw	r24, r18
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	82 0f       	add	r24, r18
    15c2:	93 1f       	adc	r25, r19
    15c4:	2f ef       	ldi	r18, 0xFF	; 255
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	b9 01       	movw	r22, r18
    15ca:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divmodhi4>
    15ce:	cb 01       	movw	r24, r22
    15d0:	82 95       	swap	r24
    15d2:	92 95       	swap	r25
    15d4:	90 7f       	andi	r25, 0xF0	; 240
    15d6:	98 27       	eor	r25, r24
    15d8:	80 7f       	andi	r24, 0xF0	; 240
    15da:	98 27       	eor	r25, r24
    15dc:	84 2b       	or	r24, r20
    15de:	f8 01       	movw	r30, r16
    15e0:	80 83       	st	Z, r24
			// Assigning Lower Nibble
			Assign_Low_Nibble(PORTC, (int ) (((adcREAD * 5) % 255) / 28));
    15e2:	05 e3       	ldi	r16, 0x35	; 53
    15e4:	10 e0       	ldi	r17, 0x00	; 0
    15e6:	e5 e3       	ldi	r30, 0x35	; 53
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	40 7f       	andi	r20, 0xF0	; 240
    15f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	c9 01       	movw	r24, r18
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	82 0f       	add	r24, r18
    1602:	93 1f       	adc	r25, r19
    1604:	2f ef       	ldi	r18, 0xFF	; 255
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	b9 01       	movw	r22, r18
    160a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divmodhi4>
    160e:	2c e1       	ldi	r18, 0x1C	; 28
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	b9 01       	movw	r22, r18
    1614:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divmodhi4>
    1618:	cb 01       	movw	r24, r22
    161a:	8f 70       	andi	r24, 0x0F	; 15
    161c:	84 2b       	or	r24, r20
    161e:	f8 01       	movw	r30, r16
    1620:	80 83       	st	Z, r24
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e8       	ldi	r25, 0x80	; 128
    1626:	ab e3       	ldi	r26, 0x3B	; 59
    1628:	b5 e4       	ldi	r27, 0x45	; 69
    162a:	8b 87       	std	Y+11, r24	; 0x0b
    162c:	9c 87       	std	Y+12, r25	; 0x0c
    162e:	ad 87       	std	Y+13, r26	; 0x0d
    1630:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1632:	6b 85       	ldd	r22, Y+11	; 0x0b
    1634:	7c 85       	ldd	r23, Y+12	; 0x0c
    1636:	8d 85       	ldd	r24, Y+13	; 0x0d
    1638:	9e 85       	ldd	r25, Y+14	; 0x0e
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	4a e7       	ldi	r20, 0x7A	; 122
    1640:	54 e4       	ldi	r21, 0x44	; 68
    1642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	8f 83       	std	Y+7, r24	; 0x07
    164c:	98 87       	std	Y+8, r25	; 0x08
    164e:	a9 87       	std	Y+9, r26	; 0x09
    1650:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1652:	6f 81       	ldd	r22, Y+7	; 0x07
    1654:	78 85       	ldd	r23, Y+8	; 0x08
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e8       	ldi	r20, 0x80	; 128
    1660:	5f e3       	ldi	r21, 0x3F	; 63
    1662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1666:	88 23       	and	r24, r24
    1668:	2c f4       	brge	.+10     	; 0x1674 <main+0x118>
		__ticks = 1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	9e 83       	std	Y+6, r25	; 0x06
    1670:	8d 83       	std	Y+5, r24	; 0x05
    1672:	3f c0       	rjmp	.+126    	; 0x16f2 <main+0x196>
	else if (__tmp > 65535)
    1674:	6f 81       	ldd	r22, Y+7	; 0x07
    1676:	78 85       	ldd	r23, Y+8	; 0x08
    1678:	89 85       	ldd	r24, Y+9	; 0x09
    167a:	9a 85       	ldd	r25, Y+10	; 0x0a
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	3f ef       	ldi	r19, 0xFF	; 255
    1680:	4f e7       	ldi	r20, 0x7F	; 127
    1682:	57 e4       	ldi	r21, 0x47	; 71
    1684:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1688:	18 16       	cp	r1, r24
    168a:	4c f5       	brge	.+82     	; 0x16de <main+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168c:	6b 85       	ldd	r22, Y+11	; 0x0b
    168e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1690:	8d 85       	ldd	r24, Y+13	; 0x0d
    1692:	9e 85       	ldd	r25, Y+14	; 0x0e
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e2       	ldi	r20, 0x20	; 32
    169a:	51 e4       	ldi	r21, 0x41	; 65
    169c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	9e 83       	std	Y+6, r25	; 0x06
    16b2:	8d 83       	std	Y+5, r24	; 0x05
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <main+0x178>
    16b6:	84 e6       	ldi	r24, 0x64	; 100
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <main+0x166>
    16c6:	9c 83       	std	Y+4, r25	; 0x04
    16c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	9e 83       	std	Y+6, r25	; 0x06
    16d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	9e 81       	ldd	r25, Y+6	; 0x06
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	69 f7       	brne	.-38     	; 0x16b6 <main+0x15a>
    16dc:	14 c0       	rjmp	.+40     	; 0x1706 <main+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16de:	6f 81       	ldd	r22, Y+7	; 0x07
    16e0:	78 85       	ldd	r23, Y+8	; 0x08
    16e2:	89 85       	ldd	r24, Y+9	; 0x09
    16e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	9e 83       	std	Y+6, r25	; 0x06
    16f0:	8d 83       	std	Y+5, r24	; 0x05
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	9a 83       	std	Y+2, r25	; 0x02
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	9a 81       	ldd	r25, Y+2	; 0x02
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <main+0x1a2>
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(3000);

			// It replaces the serial monitor output
			printf("Not Pressed, The LED is OFF");
    1706:	00 d0       	rcall	.+0      	; 0x1708 <main+0x1ac>
    1708:	ed b7       	in	r30, 0x3d	; 61
    170a:	fe b7       	in	r31, 0x3e	; 62
    170c:	31 96       	adiw	r30, 0x01	; 1
    170e:	80 e6       	ldi	r24, 0x60	; 96
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	80 83       	st	Z, r24
    1716:	0e 94 0b 0c 	call	0x1816	; 0x1816 <printf>
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
	// Initializing External interrupt
	ExternalInterrupt_voidInitialzie();

	while (1) {

		while (flag == 0) {
    171e:	80 91 9c 00 	lds	r24, 0x009C
    1722:	88 23       	and	r24, r24
    1724:	09 f4       	brne	.+2      	; 0x1728 <main+0x1cc>
    1726:	33 cf       	rjmp	.-410    	; 0x158e <main+0x32>
    1728:	13 c0       	rjmp	.+38     	; 0x1750 <main+0x1f4>

		}

		while (flag == 1) {

			PORTC = 0x00;
    172a:	e5 e3       	ldi	r30, 0x35	; 53
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	10 82       	st	Z, r1
			PORTB = 0x0f;
    1730:	e8 e3       	ldi	r30, 0x38	; 56
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8f e0       	ldi	r24, 0x0F	; 15
    1736:	80 83       	st	Z, r24

			// It replaces the serial monitor output
			printf("Pressed, The LED is ON");
    1738:	00 d0       	rcall	.+0      	; 0x173a <main+0x1de>
    173a:	ed b7       	in	r30, 0x3d	; 61
    173c:	fe b7       	in	r31, 0x3e	; 62
    173e:	31 96       	adiw	r30, 0x01	; 1
    1740:	8c e7       	ldi	r24, 0x7C	; 124
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	91 83       	std	Z+1, r25	; 0x01
    1746:	80 83       	st	Z, r24
    1748:	0e 94 0b 0c 	call	0x1816	; 0x1816 <printf>
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
			// It replaces the serial monitor output
			printf("Not Pressed, The LED is OFF");

		}

		while (flag == 1) {
    1750:	80 91 9c 00 	lds	r24, 0x009C
    1754:	81 30       	cpi	r24, 0x01	; 1
    1756:	49 f3       	breq	.-46     	; 0x172a <main+0x1ce>
    1758:	e2 cf       	rjmp	.-60     	; 0x171e <main+0x1c2>

0000175a <__udivmodhi4>:
    175a:	aa 1b       	sub	r26, r26
    175c:	bb 1b       	sub	r27, r27
    175e:	51 e1       	ldi	r21, 0x11	; 17
    1760:	07 c0       	rjmp	.+14     	; 0x1770 <__udivmodhi4_ep>

00001762 <__udivmodhi4_loop>:
    1762:	aa 1f       	adc	r26, r26
    1764:	bb 1f       	adc	r27, r27
    1766:	a6 17       	cp	r26, r22
    1768:	b7 07       	cpc	r27, r23
    176a:	10 f0       	brcs	.+4      	; 0x1770 <__udivmodhi4_ep>
    176c:	a6 1b       	sub	r26, r22
    176e:	b7 0b       	sbc	r27, r23

00001770 <__udivmodhi4_ep>:
    1770:	88 1f       	adc	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	5a 95       	dec	r21
    1776:	a9 f7       	brne	.-22     	; 0x1762 <__udivmodhi4_loop>
    1778:	80 95       	com	r24
    177a:	90 95       	com	r25
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	08 95       	ret

00001782 <__divmodhi4>:
    1782:	97 fb       	bst	r25, 7
    1784:	09 2e       	mov	r0, r25
    1786:	07 26       	eor	r0, r23
    1788:	0a d0       	rcall	.+20     	; 0x179e <__divmodhi4_neg1>
    178a:	77 fd       	sbrc	r23, 7
    178c:	04 d0       	rcall	.+8      	; 0x1796 <__divmodhi4_neg2>
    178e:	e5 df       	rcall	.-54     	; 0x175a <__udivmodhi4>
    1790:	06 d0       	rcall	.+12     	; 0x179e <__divmodhi4_neg1>
    1792:	00 20       	and	r0, r0
    1794:	1a f4       	brpl	.+6      	; 0x179c <__divmodhi4_exit>

00001796 <__divmodhi4_neg2>:
    1796:	70 95       	com	r23
    1798:	61 95       	neg	r22
    179a:	7f 4f       	sbci	r23, 0xFF	; 255

0000179c <__divmodhi4_exit>:
    179c:	08 95       	ret

0000179e <__divmodhi4_neg1>:
    179e:	f6 f7       	brtc	.-4      	; 0x179c <__divmodhi4_exit>
    17a0:	90 95       	com	r25
    17a2:	81 95       	neg	r24
    17a4:	9f 4f       	sbci	r25, 0xFF	; 255
    17a6:	08 95       	ret

000017a8 <__prologue_saves__>:
    17a8:	2f 92       	push	r2
    17aa:	3f 92       	push	r3
    17ac:	4f 92       	push	r4
    17ae:	5f 92       	push	r5
    17b0:	6f 92       	push	r6
    17b2:	7f 92       	push	r7
    17b4:	8f 92       	push	r8
    17b6:	9f 92       	push	r9
    17b8:	af 92       	push	r10
    17ba:	bf 92       	push	r11
    17bc:	cf 92       	push	r12
    17be:	df 92       	push	r13
    17c0:	ef 92       	push	r14
    17c2:	ff 92       	push	r15
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	ca 1b       	sub	r28, r26
    17d2:	db 0b       	sbc	r29, r27
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	09 94       	ijmp

000017e0 <__epilogue_restores__>:
    17e0:	2a 88       	ldd	r2, Y+18	; 0x12
    17e2:	39 88       	ldd	r3, Y+17	; 0x11
    17e4:	48 88       	ldd	r4, Y+16	; 0x10
    17e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    17e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    17ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    17ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    17ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    17f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    17f2:	b9 84       	ldd	r11, Y+9	; 0x09
    17f4:	c8 84       	ldd	r12, Y+8	; 0x08
    17f6:	df 80       	ldd	r13, Y+7	; 0x07
    17f8:	ee 80       	ldd	r14, Y+6	; 0x06
    17fa:	fd 80       	ldd	r15, Y+5	; 0x05
    17fc:	0c 81       	ldd	r16, Y+4	; 0x04
    17fe:	1b 81       	ldd	r17, Y+3	; 0x03
    1800:	aa 81       	ldd	r26, Y+2	; 0x02
    1802:	b9 81       	ldd	r27, Y+1	; 0x01
    1804:	ce 0f       	add	r28, r30
    1806:	d1 1d       	adc	r29, r1
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	ed 01       	movw	r28, r26
    1814:	08 95       	ret

00001816 <printf>:
    1816:	a0 e0       	ldi	r26, 0x00	; 0
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e1 e1       	ldi	r30, 0x11	; 17
    181c:	fc e0       	ldi	r31, 0x0C	; 12
    181e:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__prologue_saves__+0x20>
    1822:	fe 01       	movw	r30, r28
    1824:	35 96       	adiw	r30, 0x05	; 5
    1826:	61 91       	ld	r22, Z+
    1828:	71 91       	ld	r23, Z+
    182a:	80 91 9f 00 	lds	r24, 0x009F
    182e:	90 91 a0 00 	lds	r25, 0x00A0
    1832:	af 01       	movw	r20, r30
    1834:	0e 94 20 0c 	call	0x1840	; 0x1840 <vfprintf>
    1838:	20 96       	adiw	r28, 0x00	; 0
    183a:	e2 e0       	ldi	r30, 0x02	; 2
    183c:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__epilogue_restores__+0x20>

00001840 <vfprintf>:
    1840:	ab e0       	ldi	r26, 0x0B	; 11
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e6 e2       	ldi	r30, 0x26	; 38
    1846:	fc e0       	ldi	r31, 0x0C	; 12
    1848:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__prologue_saves__>
    184c:	3c 01       	movw	r6, r24
    184e:	2b 01       	movw	r4, r22
    1850:	5a 01       	movw	r10, r20
    1852:	fc 01       	movw	r30, r24
    1854:	17 82       	std	Z+7, r1	; 0x07
    1856:	16 82       	std	Z+6, r1	; 0x06
    1858:	83 81       	ldd	r24, Z+3	; 0x03
    185a:	81 fd       	sbrc	r24, 1
    185c:	03 c0       	rjmp	.+6      	; 0x1864 <vfprintf+0x24>
    185e:	6f ef       	ldi	r22, 0xFF	; 255
    1860:	7f ef       	ldi	r23, 0xFF	; 255
    1862:	c6 c1       	rjmp	.+908    	; 0x1bf0 <vfprintf+0x3b0>
    1864:	9a e0       	ldi	r25, 0x0A	; 10
    1866:	89 2e       	mov	r8, r25
    1868:	1e 01       	movw	r2, r28
    186a:	08 94       	sec
    186c:	21 1c       	adc	r2, r1
    186e:	31 1c       	adc	r3, r1
    1870:	f3 01       	movw	r30, r6
    1872:	23 81       	ldd	r18, Z+3	; 0x03
    1874:	f2 01       	movw	r30, r4
    1876:	23 fd       	sbrc	r18, 3
    1878:	85 91       	lpm	r24, Z+
    187a:	23 ff       	sbrs	r18, 3
    187c:	81 91       	ld	r24, Z+
    187e:	2f 01       	movw	r4, r30
    1880:	88 23       	and	r24, r24
    1882:	09 f4       	brne	.+2      	; 0x1886 <vfprintf+0x46>
    1884:	b2 c1       	rjmp	.+868    	; 0x1bea <vfprintf+0x3aa>
    1886:	85 32       	cpi	r24, 0x25	; 37
    1888:	39 f4       	brne	.+14     	; 0x1898 <vfprintf+0x58>
    188a:	23 fd       	sbrc	r18, 3
    188c:	85 91       	lpm	r24, Z+
    188e:	23 ff       	sbrs	r18, 3
    1890:	81 91       	ld	r24, Z+
    1892:	2f 01       	movw	r4, r30
    1894:	85 32       	cpi	r24, 0x25	; 37
    1896:	29 f4       	brne	.+10     	; 0x18a2 <vfprintf+0x62>
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	b3 01       	movw	r22, r6
    189c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <fputc>
    18a0:	e7 cf       	rjmp	.-50     	; 0x1870 <vfprintf+0x30>
    18a2:	98 2f       	mov	r25, r24
    18a4:	ff 24       	eor	r15, r15
    18a6:	ee 24       	eor	r14, r14
    18a8:	99 24       	eor	r9, r9
    18aa:	ff e1       	ldi	r31, 0x1F	; 31
    18ac:	ff 15       	cp	r31, r15
    18ae:	d0 f0       	brcs	.+52     	; 0x18e4 <vfprintf+0xa4>
    18b0:	9b 32       	cpi	r25, 0x2B	; 43
    18b2:	69 f0       	breq	.+26     	; 0x18ce <vfprintf+0x8e>
    18b4:	9c 32       	cpi	r25, 0x2C	; 44
    18b6:	28 f4       	brcc	.+10     	; 0x18c2 <vfprintf+0x82>
    18b8:	90 32       	cpi	r25, 0x20	; 32
    18ba:	59 f0       	breq	.+22     	; 0x18d2 <vfprintf+0x92>
    18bc:	93 32       	cpi	r25, 0x23	; 35
    18be:	91 f4       	brne	.+36     	; 0x18e4 <vfprintf+0xa4>
    18c0:	0e c0       	rjmp	.+28     	; 0x18de <vfprintf+0x9e>
    18c2:	9d 32       	cpi	r25, 0x2D	; 45
    18c4:	49 f0       	breq	.+18     	; 0x18d8 <vfprintf+0x98>
    18c6:	90 33       	cpi	r25, 0x30	; 48
    18c8:	69 f4       	brne	.+26     	; 0x18e4 <vfprintf+0xa4>
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	24 c0       	rjmp	.+72     	; 0x1916 <vfprintf+0xd6>
    18ce:	52 e0       	ldi	r21, 0x02	; 2
    18d0:	f5 2a       	or	r15, r21
    18d2:	84 e0       	ldi	r24, 0x04	; 4
    18d4:	f8 2a       	or	r15, r24
    18d6:	28 c0       	rjmp	.+80     	; 0x1928 <vfprintf+0xe8>
    18d8:	98 e0       	ldi	r25, 0x08	; 8
    18da:	f9 2a       	or	r15, r25
    18dc:	25 c0       	rjmp	.+74     	; 0x1928 <vfprintf+0xe8>
    18de:	e0 e1       	ldi	r30, 0x10	; 16
    18e0:	fe 2a       	or	r15, r30
    18e2:	22 c0       	rjmp	.+68     	; 0x1928 <vfprintf+0xe8>
    18e4:	f7 fc       	sbrc	r15, 7
    18e6:	29 c0       	rjmp	.+82     	; 0x193a <vfprintf+0xfa>
    18e8:	89 2f       	mov	r24, r25
    18ea:	80 53       	subi	r24, 0x30	; 48
    18ec:	8a 30       	cpi	r24, 0x0A	; 10
    18ee:	70 f4       	brcc	.+28     	; 0x190c <vfprintf+0xcc>
    18f0:	f6 fe       	sbrs	r15, 6
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <vfprintf+0xbe>
    18f4:	98 9c       	mul	r9, r8
    18f6:	90 2c       	mov	r9, r0
    18f8:	11 24       	eor	r1, r1
    18fa:	98 0e       	add	r9, r24
    18fc:	15 c0       	rjmp	.+42     	; 0x1928 <vfprintf+0xe8>
    18fe:	e8 9c       	mul	r14, r8
    1900:	e0 2c       	mov	r14, r0
    1902:	11 24       	eor	r1, r1
    1904:	e8 0e       	add	r14, r24
    1906:	f0 e2       	ldi	r31, 0x20	; 32
    1908:	ff 2a       	or	r15, r31
    190a:	0e c0       	rjmp	.+28     	; 0x1928 <vfprintf+0xe8>
    190c:	9e 32       	cpi	r25, 0x2E	; 46
    190e:	29 f4       	brne	.+10     	; 0x191a <vfprintf+0xda>
    1910:	f6 fc       	sbrc	r15, 6
    1912:	6b c1       	rjmp	.+726    	; 0x1bea <vfprintf+0x3aa>
    1914:	40 e4       	ldi	r20, 0x40	; 64
    1916:	f4 2a       	or	r15, r20
    1918:	07 c0       	rjmp	.+14     	; 0x1928 <vfprintf+0xe8>
    191a:	9c 36       	cpi	r25, 0x6C	; 108
    191c:	19 f4       	brne	.+6      	; 0x1924 <vfprintf+0xe4>
    191e:	50 e8       	ldi	r21, 0x80	; 128
    1920:	f5 2a       	or	r15, r21
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <vfprintf+0xe8>
    1924:	98 36       	cpi	r25, 0x68	; 104
    1926:	49 f4       	brne	.+18     	; 0x193a <vfprintf+0xfa>
    1928:	f2 01       	movw	r30, r4
    192a:	23 fd       	sbrc	r18, 3
    192c:	95 91       	lpm	r25, Z+
    192e:	23 ff       	sbrs	r18, 3
    1930:	91 91       	ld	r25, Z+
    1932:	2f 01       	movw	r4, r30
    1934:	99 23       	and	r25, r25
    1936:	09 f0       	breq	.+2      	; 0x193a <vfprintf+0xfa>
    1938:	b8 cf       	rjmp	.-144    	; 0x18aa <vfprintf+0x6a>
    193a:	89 2f       	mov	r24, r25
    193c:	85 54       	subi	r24, 0x45	; 69
    193e:	83 30       	cpi	r24, 0x03	; 3
    1940:	18 f0       	brcs	.+6      	; 0x1948 <vfprintf+0x108>
    1942:	80 52       	subi	r24, 0x20	; 32
    1944:	83 30       	cpi	r24, 0x03	; 3
    1946:	38 f4       	brcc	.+14     	; 0x1956 <vfprintf+0x116>
    1948:	44 e0       	ldi	r20, 0x04	; 4
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	a4 0e       	add	r10, r20
    194e:	b5 1e       	adc	r11, r21
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	59 83       	std	Y+1, r21	; 0x01
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <vfprintf+0x134>
    1956:	93 36       	cpi	r25, 0x63	; 99
    1958:	31 f0       	breq	.+12     	; 0x1966 <vfprintf+0x126>
    195a:	93 37       	cpi	r25, 0x73	; 115
    195c:	79 f0       	breq	.+30     	; 0x197c <vfprintf+0x13c>
    195e:	93 35       	cpi	r25, 0x53	; 83
    1960:	09 f0       	breq	.+2      	; 0x1964 <vfprintf+0x124>
    1962:	56 c0       	rjmp	.+172    	; 0x1a10 <vfprintf+0x1d0>
    1964:	20 c0       	rjmp	.+64     	; 0x19a6 <vfprintf+0x166>
    1966:	f5 01       	movw	r30, r10
    1968:	80 81       	ld	r24, Z
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	42 e0       	ldi	r20, 0x02	; 2
    196e:	50 e0       	ldi	r21, 0x00	; 0
    1970:	a4 0e       	add	r10, r20
    1972:	b5 1e       	adc	r11, r21
    1974:	61 01       	movw	r12, r2
    1976:	01 e0       	ldi	r16, 0x01	; 1
    1978:	10 e0       	ldi	r17, 0x00	; 0
    197a:	12 c0       	rjmp	.+36     	; 0x19a0 <vfprintf+0x160>
    197c:	f5 01       	movw	r30, r10
    197e:	c0 80       	ld	r12, Z
    1980:	d1 80       	ldd	r13, Z+1	; 0x01
    1982:	f6 fc       	sbrc	r15, 6
    1984:	03 c0       	rjmp	.+6      	; 0x198c <vfprintf+0x14c>
    1986:	6f ef       	ldi	r22, 0xFF	; 255
    1988:	7f ef       	ldi	r23, 0xFF	; 255
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <vfprintf+0x150>
    198c:	69 2d       	mov	r22, r9
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	42 e0       	ldi	r20, 0x02	; 2
    1992:	50 e0       	ldi	r21, 0x00	; 0
    1994:	a4 0e       	add	r10, r20
    1996:	b5 1e       	adc	r11, r21
    1998:	c6 01       	movw	r24, r12
    199a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <strnlen>
    199e:	8c 01       	movw	r16, r24
    19a0:	5f e7       	ldi	r21, 0x7F	; 127
    19a2:	f5 22       	and	r15, r21
    19a4:	14 c0       	rjmp	.+40     	; 0x19ce <vfprintf+0x18e>
    19a6:	f5 01       	movw	r30, r10
    19a8:	c0 80       	ld	r12, Z
    19aa:	d1 80       	ldd	r13, Z+1	; 0x01
    19ac:	f6 fc       	sbrc	r15, 6
    19ae:	03 c0       	rjmp	.+6      	; 0x19b6 <vfprintf+0x176>
    19b0:	6f ef       	ldi	r22, 0xFF	; 255
    19b2:	7f ef       	ldi	r23, 0xFF	; 255
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <vfprintf+0x17a>
    19b6:	69 2d       	mov	r22, r9
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	42 e0       	ldi	r20, 0x02	; 2
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	a4 0e       	add	r10, r20
    19c0:	b5 1e       	adc	r11, r21
    19c2:	c6 01       	movw	r24, r12
    19c4:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <strnlen_P>
    19c8:	8c 01       	movw	r16, r24
    19ca:	50 e8       	ldi	r21, 0x80	; 128
    19cc:	f5 2a       	or	r15, r21
    19ce:	f3 fe       	sbrs	r15, 3
    19d0:	07 c0       	rjmp	.+14     	; 0x19e0 <vfprintf+0x1a0>
    19d2:	1a c0       	rjmp	.+52     	; 0x1a08 <vfprintf+0x1c8>
    19d4:	80 e2       	ldi	r24, 0x20	; 32
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	b3 01       	movw	r22, r6
    19da:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <fputc>
    19de:	ea 94       	dec	r14
    19e0:	8e 2d       	mov	r24, r14
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	08 17       	cp	r16, r24
    19e6:	19 07       	cpc	r17, r25
    19e8:	a8 f3       	brcs	.-22     	; 0x19d4 <vfprintf+0x194>
    19ea:	0e c0       	rjmp	.+28     	; 0x1a08 <vfprintf+0x1c8>
    19ec:	f6 01       	movw	r30, r12
    19ee:	f7 fc       	sbrc	r15, 7
    19f0:	85 91       	lpm	r24, Z+
    19f2:	f7 fe       	sbrs	r15, 7
    19f4:	81 91       	ld	r24, Z+
    19f6:	6f 01       	movw	r12, r30
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	b3 01       	movw	r22, r6
    19fc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <fputc>
    1a00:	e1 10       	cpse	r14, r1
    1a02:	ea 94       	dec	r14
    1a04:	01 50       	subi	r16, 0x01	; 1
    1a06:	10 40       	sbci	r17, 0x00	; 0
    1a08:	01 15       	cp	r16, r1
    1a0a:	11 05       	cpc	r17, r1
    1a0c:	79 f7       	brne	.-34     	; 0x19ec <vfprintf+0x1ac>
    1a0e:	ea c0       	rjmp	.+468    	; 0x1be4 <vfprintf+0x3a4>
    1a10:	94 36       	cpi	r25, 0x64	; 100
    1a12:	11 f0       	breq	.+4      	; 0x1a18 <vfprintf+0x1d8>
    1a14:	99 36       	cpi	r25, 0x69	; 105
    1a16:	69 f5       	brne	.+90     	; 0x1a72 <vfprintf+0x232>
    1a18:	f7 fe       	sbrs	r15, 7
    1a1a:	08 c0       	rjmp	.+16     	; 0x1a2c <vfprintf+0x1ec>
    1a1c:	f5 01       	movw	r30, r10
    1a1e:	20 81       	ld	r18, Z
    1a20:	31 81       	ldd	r19, Z+1	; 0x01
    1a22:	42 81       	ldd	r20, Z+2	; 0x02
    1a24:	53 81       	ldd	r21, Z+3	; 0x03
    1a26:	84 e0       	ldi	r24, 0x04	; 4
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0a c0       	rjmp	.+20     	; 0x1a40 <vfprintf+0x200>
    1a2c:	f5 01       	movw	r30, r10
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	9c 01       	movw	r18, r24
    1a34:	44 27       	eor	r20, r20
    1a36:	37 fd       	sbrc	r19, 7
    1a38:	40 95       	com	r20
    1a3a:	54 2f       	mov	r21, r20
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	a8 0e       	add	r10, r24
    1a42:	b9 1e       	adc	r11, r25
    1a44:	9f e6       	ldi	r25, 0x6F	; 111
    1a46:	f9 22       	and	r15, r25
    1a48:	57 ff       	sbrs	r21, 7
    1a4a:	09 c0       	rjmp	.+18     	; 0x1a5e <vfprintf+0x21e>
    1a4c:	50 95       	com	r21
    1a4e:	40 95       	com	r20
    1a50:	30 95       	com	r19
    1a52:	21 95       	neg	r18
    1a54:	3f 4f       	sbci	r19, 0xFF	; 255
    1a56:	4f 4f       	sbci	r20, 0xFF	; 255
    1a58:	5f 4f       	sbci	r21, 0xFF	; 255
    1a5a:	e0 e8       	ldi	r30, 0x80	; 128
    1a5c:	fe 2a       	or	r15, r30
    1a5e:	ca 01       	movw	r24, r20
    1a60:	b9 01       	movw	r22, r18
    1a62:	a1 01       	movw	r20, r2
    1a64:	2a e0       	ldi	r18, 0x0A	; 10
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__ultoa_invert>
    1a6c:	d8 2e       	mov	r13, r24
    1a6e:	d2 18       	sub	r13, r2
    1a70:	40 c0       	rjmp	.+128    	; 0x1af2 <vfprintf+0x2b2>
    1a72:	95 37       	cpi	r25, 0x75	; 117
    1a74:	29 f4       	brne	.+10     	; 0x1a80 <vfprintf+0x240>
    1a76:	1f 2d       	mov	r17, r15
    1a78:	1f 7e       	andi	r17, 0xEF	; 239
    1a7a:	2a e0       	ldi	r18, 0x0A	; 10
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	1d c0       	rjmp	.+58     	; 0x1aba <vfprintf+0x27a>
    1a80:	1f 2d       	mov	r17, r15
    1a82:	19 7f       	andi	r17, 0xF9	; 249
    1a84:	9f 36       	cpi	r25, 0x6F	; 111
    1a86:	61 f0       	breq	.+24     	; 0x1aa0 <vfprintf+0x260>
    1a88:	90 37       	cpi	r25, 0x70	; 112
    1a8a:	20 f4       	brcc	.+8      	; 0x1a94 <vfprintf+0x254>
    1a8c:	98 35       	cpi	r25, 0x58	; 88
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <vfprintf+0x252>
    1a90:	ac c0       	rjmp	.+344    	; 0x1bea <vfprintf+0x3aa>
    1a92:	0f c0       	rjmp	.+30     	; 0x1ab2 <vfprintf+0x272>
    1a94:	90 37       	cpi	r25, 0x70	; 112
    1a96:	39 f0       	breq	.+14     	; 0x1aa6 <vfprintf+0x266>
    1a98:	98 37       	cpi	r25, 0x78	; 120
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <vfprintf+0x25e>
    1a9c:	a6 c0       	rjmp	.+332    	; 0x1bea <vfprintf+0x3aa>
    1a9e:	04 c0       	rjmp	.+8      	; 0x1aa8 <vfprintf+0x268>
    1aa0:	28 e0       	ldi	r18, 0x08	; 8
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	0a c0       	rjmp	.+20     	; 0x1aba <vfprintf+0x27a>
    1aa6:	10 61       	ori	r17, 0x10	; 16
    1aa8:	14 fd       	sbrc	r17, 4
    1aaa:	14 60       	ori	r17, 0x04	; 4
    1aac:	20 e1       	ldi	r18, 0x10	; 16
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	04 c0       	rjmp	.+8      	; 0x1aba <vfprintf+0x27a>
    1ab2:	14 fd       	sbrc	r17, 4
    1ab4:	16 60       	ori	r17, 0x06	; 6
    1ab6:	20 e1       	ldi	r18, 0x10	; 16
    1ab8:	32 e0       	ldi	r19, 0x02	; 2
    1aba:	17 ff       	sbrs	r17, 7
    1abc:	08 c0       	rjmp	.+16     	; 0x1ace <vfprintf+0x28e>
    1abe:	f5 01       	movw	r30, r10
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	44 e0       	ldi	r20, 0x04	; 4
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	08 c0       	rjmp	.+16     	; 0x1ade <vfprintf+0x29e>
    1ace:	f5 01       	movw	r30, r10
    1ad0:	80 81       	ld	r24, Z
    1ad2:	91 81       	ldd	r25, Z+1	; 0x01
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	42 e0       	ldi	r20, 0x02	; 2
    1adc:	50 e0       	ldi	r21, 0x00	; 0
    1ade:	a4 0e       	add	r10, r20
    1ae0:	b5 1e       	adc	r11, r21
    1ae2:	a1 01       	movw	r20, r2
    1ae4:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__ultoa_invert>
    1ae8:	d8 2e       	mov	r13, r24
    1aea:	d2 18       	sub	r13, r2
    1aec:	8f e7       	ldi	r24, 0x7F	; 127
    1aee:	f8 2e       	mov	r15, r24
    1af0:	f1 22       	and	r15, r17
    1af2:	f6 fe       	sbrs	r15, 6
    1af4:	0b c0       	rjmp	.+22     	; 0x1b0c <vfprintf+0x2cc>
    1af6:	5e ef       	ldi	r21, 0xFE	; 254
    1af8:	f5 22       	and	r15, r21
    1afa:	d9 14       	cp	r13, r9
    1afc:	38 f4       	brcc	.+14     	; 0x1b0c <vfprintf+0x2cc>
    1afe:	f4 fe       	sbrs	r15, 4
    1b00:	07 c0       	rjmp	.+14     	; 0x1b10 <vfprintf+0x2d0>
    1b02:	f2 fc       	sbrc	r15, 2
    1b04:	05 c0       	rjmp	.+10     	; 0x1b10 <vfprintf+0x2d0>
    1b06:	8f ee       	ldi	r24, 0xEF	; 239
    1b08:	f8 22       	and	r15, r24
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <vfprintf+0x2d0>
    1b0c:	1d 2d       	mov	r17, r13
    1b0e:	01 c0       	rjmp	.+2      	; 0x1b12 <vfprintf+0x2d2>
    1b10:	19 2d       	mov	r17, r9
    1b12:	f4 fe       	sbrs	r15, 4
    1b14:	0d c0       	rjmp	.+26     	; 0x1b30 <vfprintf+0x2f0>
    1b16:	fe 01       	movw	r30, r28
    1b18:	ed 0d       	add	r30, r13
    1b1a:	f1 1d       	adc	r31, r1
    1b1c:	80 81       	ld	r24, Z
    1b1e:	80 33       	cpi	r24, 0x30	; 48
    1b20:	19 f4       	brne	.+6      	; 0x1b28 <vfprintf+0x2e8>
    1b22:	99 ee       	ldi	r25, 0xE9	; 233
    1b24:	f9 22       	and	r15, r25
    1b26:	08 c0       	rjmp	.+16     	; 0x1b38 <vfprintf+0x2f8>
    1b28:	1f 5f       	subi	r17, 0xFF	; 255
    1b2a:	f2 fe       	sbrs	r15, 2
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <vfprintf+0x2f8>
    1b2e:	03 c0       	rjmp	.+6      	; 0x1b36 <vfprintf+0x2f6>
    1b30:	8f 2d       	mov	r24, r15
    1b32:	86 78       	andi	r24, 0x86	; 134
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <vfprintf+0x2f8>
    1b36:	1f 5f       	subi	r17, 0xFF	; 255
    1b38:	0f 2d       	mov	r16, r15
    1b3a:	f3 fc       	sbrc	r15, 3
    1b3c:	14 c0       	rjmp	.+40     	; 0x1b66 <vfprintf+0x326>
    1b3e:	f0 fe       	sbrs	r15, 0
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <vfprintf+0x320>
    1b42:	1e 15       	cp	r17, r14
    1b44:	10 f0       	brcs	.+4      	; 0x1b4a <vfprintf+0x30a>
    1b46:	9d 2c       	mov	r9, r13
    1b48:	0b c0       	rjmp	.+22     	; 0x1b60 <vfprintf+0x320>
    1b4a:	9d 2c       	mov	r9, r13
    1b4c:	9e 0c       	add	r9, r14
    1b4e:	91 1a       	sub	r9, r17
    1b50:	1e 2d       	mov	r17, r14
    1b52:	06 c0       	rjmp	.+12     	; 0x1b60 <vfprintf+0x320>
    1b54:	80 e2       	ldi	r24, 0x20	; 32
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	b3 01       	movw	r22, r6
    1b5a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <fputc>
    1b5e:	1f 5f       	subi	r17, 0xFF	; 255
    1b60:	1e 15       	cp	r17, r14
    1b62:	c0 f3       	brcs	.-16     	; 0x1b54 <vfprintf+0x314>
    1b64:	04 c0       	rjmp	.+8      	; 0x1b6e <vfprintf+0x32e>
    1b66:	1e 15       	cp	r17, r14
    1b68:	10 f4       	brcc	.+4      	; 0x1b6e <vfprintf+0x32e>
    1b6a:	e1 1a       	sub	r14, r17
    1b6c:	01 c0       	rjmp	.+2      	; 0x1b70 <vfprintf+0x330>
    1b6e:	ee 24       	eor	r14, r14
    1b70:	04 ff       	sbrs	r16, 4
    1b72:	0f c0       	rjmp	.+30     	; 0x1b92 <vfprintf+0x352>
    1b74:	80 e3       	ldi	r24, 0x30	; 48
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	b3 01       	movw	r22, r6
    1b7a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <fputc>
    1b7e:	02 ff       	sbrs	r16, 2
    1b80:	1d c0       	rjmp	.+58     	; 0x1bbc <vfprintf+0x37c>
    1b82:	01 fd       	sbrc	r16, 1
    1b84:	03 c0       	rjmp	.+6      	; 0x1b8c <vfprintf+0x34c>
    1b86:	88 e7       	ldi	r24, 0x78	; 120
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e c0       	rjmp	.+28     	; 0x1ba8 <vfprintf+0x368>
    1b8c:	88 e5       	ldi	r24, 0x58	; 88
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	0b c0       	rjmp	.+22     	; 0x1ba8 <vfprintf+0x368>
    1b92:	80 2f       	mov	r24, r16
    1b94:	86 78       	andi	r24, 0x86	; 134
    1b96:	91 f0       	breq	.+36     	; 0x1bbc <vfprintf+0x37c>
    1b98:	01 ff       	sbrs	r16, 1
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <vfprintf+0x360>
    1b9c:	8b e2       	ldi	r24, 0x2B	; 43
    1b9e:	01 c0       	rjmp	.+2      	; 0x1ba2 <vfprintf+0x362>
    1ba0:	80 e2       	ldi	r24, 0x20	; 32
    1ba2:	f7 fc       	sbrc	r15, 7
    1ba4:	8d e2       	ldi	r24, 0x2D	; 45
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	b3 01       	movw	r22, r6
    1baa:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <fputc>
    1bae:	06 c0       	rjmp	.+12     	; 0x1bbc <vfprintf+0x37c>
    1bb0:	80 e3       	ldi	r24, 0x30	; 48
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	b3 01       	movw	r22, r6
    1bb6:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <fputc>
    1bba:	9a 94       	dec	r9
    1bbc:	d9 14       	cp	r13, r9
    1bbe:	c0 f3       	brcs	.-16     	; 0x1bb0 <vfprintf+0x370>
    1bc0:	da 94       	dec	r13
    1bc2:	f1 01       	movw	r30, r2
    1bc4:	ed 0d       	add	r30, r13
    1bc6:	f1 1d       	adc	r31, r1
    1bc8:	80 81       	ld	r24, Z
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	b3 01       	movw	r22, r6
    1bce:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <fputc>
    1bd2:	dd 20       	and	r13, r13
    1bd4:	a9 f7       	brne	.-22     	; 0x1bc0 <vfprintf+0x380>
    1bd6:	06 c0       	rjmp	.+12     	; 0x1be4 <vfprintf+0x3a4>
    1bd8:	80 e2       	ldi	r24, 0x20	; 32
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	b3 01       	movw	r22, r6
    1bde:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <fputc>
    1be2:	ea 94       	dec	r14
    1be4:	ee 20       	and	r14, r14
    1be6:	c1 f7       	brne	.-16     	; 0x1bd8 <vfprintf+0x398>
    1be8:	43 ce       	rjmp	.-890    	; 0x1870 <vfprintf+0x30>
    1bea:	f3 01       	movw	r30, r6
    1bec:	66 81       	ldd	r22, Z+6	; 0x06
    1bee:	77 81       	ldd	r23, Z+7	; 0x07
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	2b 96       	adiw	r28, 0x0b	; 11
    1bf4:	e2 e1       	ldi	r30, 0x12	; 18
    1bf6:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__epilogue_restores__>

00001bfa <strnlen_P>:
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	05 90       	lpm	r0, Z+
    1bfe:	61 50       	subi	r22, 0x01	; 1
    1c00:	70 40       	sbci	r23, 0x00	; 0
    1c02:	01 10       	cpse	r0, r1
    1c04:	d8 f7       	brcc	.-10     	; 0x1bfc <strnlen_P+0x2>
    1c06:	80 95       	com	r24
    1c08:	90 95       	com	r25
    1c0a:	8e 0f       	add	r24, r30
    1c0c:	9f 1f       	adc	r25, r31
    1c0e:	08 95       	ret

00001c10 <strnlen>:
    1c10:	fc 01       	movw	r30, r24
    1c12:	61 50       	subi	r22, 0x01	; 1
    1c14:	70 40       	sbci	r23, 0x00	; 0
    1c16:	01 90       	ld	r0, Z+
    1c18:	01 10       	cpse	r0, r1
    1c1a:	d8 f7       	brcc	.-10     	; 0x1c12 <strnlen+0x2>
    1c1c:	80 95       	com	r24
    1c1e:	90 95       	com	r25
    1c20:	8e 0f       	add	r24, r30
    1c22:	9f 1f       	adc	r25, r31
    1c24:	08 95       	ret

00001c26 <fputc>:
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	8c 01       	movw	r16, r24
    1c30:	eb 01       	movw	r28, r22
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	81 ff       	sbrs	r24, 1
    1c36:	1b c0       	rjmp	.+54     	; 0x1c6e <fputc+0x48>
    1c38:	82 ff       	sbrs	r24, 2
    1c3a:	0d c0       	rjmp	.+26     	; 0x1c56 <fputc+0x30>
    1c3c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c3e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	9d 81       	ldd	r25, Y+5	; 0x05
    1c44:	28 17       	cp	r18, r24
    1c46:	39 07       	cpc	r19, r25
    1c48:	64 f4       	brge	.+24     	; 0x1c62 <fputc+0x3c>
    1c4a:	e8 81       	ld	r30, Y
    1c4c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c4e:	01 93       	st	Z+, r16
    1c50:	f9 83       	std	Y+1, r31	; 0x01
    1c52:	e8 83       	st	Y, r30
    1c54:	06 c0       	rjmp	.+12     	; 0x1c62 <fputc+0x3c>
    1c56:	e8 85       	ldd	r30, Y+8	; 0x08
    1c58:	f9 85       	ldd	r31, Y+9	; 0x09
    1c5a:	80 2f       	mov	r24, r16
    1c5c:	09 95       	icall
    1c5e:	89 2b       	or	r24, r25
    1c60:	31 f4       	brne	.+12     	; 0x1c6e <fputc+0x48>
    1c62:	8e 81       	ldd	r24, Y+6	; 0x06
    1c64:	9f 81       	ldd	r25, Y+7	; 0x07
    1c66:	01 96       	adiw	r24, 0x01	; 1
    1c68:	9f 83       	std	Y+7, r25	; 0x07
    1c6a:	8e 83       	std	Y+6, r24	; 0x06
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <fputc+0x4c>
    1c6e:	0f ef       	ldi	r16, 0xFF	; 255
    1c70:	1f ef       	ldi	r17, 0xFF	; 255
    1c72:	c8 01       	movw	r24, r16
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	08 95       	ret

00001c7e <__ultoa_invert>:
    1c7e:	fa 01       	movw	r30, r20
    1c80:	aa 27       	eor	r26, r26
    1c82:	28 30       	cpi	r18, 0x08	; 8
    1c84:	51 f1       	breq	.+84     	; 0x1cda <__ultoa_invert+0x5c>
    1c86:	20 31       	cpi	r18, 0x10	; 16
    1c88:	81 f1       	breq	.+96     	; 0x1cea <__ultoa_invert+0x6c>
    1c8a:	e8 94       	clt
    1c8c:	6f 93       	push	r22
    1c8e:	6e 7f       	andi	r22, 0xFE	; 254
    1c90:	6e 5f       	subi	r22, 0xFE	; 254
    1c92:	7f 4f       	sbci	r23, 0xFF	; 255
    1c94:	8f 4f       	sbci	r24, 0xFF	; 255
    1c96:	9f 4f       	sbci	r25, 0xFF	; 255
    1c98:	af 4f       	sbci	r26, 0xFF	; 255
    1c9a:	b1 e0       	ldi	r27, 0x01	; 1
    1c9c:	3e d0       	rcall	.+124    	; 0x1d1a <__ultoa_invert+0x9c>
    1c9e:	b4 e0       	ldi	r27, 0x04	; 4
    1ca0:	3c d0       	rcall	.+120    	; 0x1d1a <__ultoa_invert+0x9c>
    1ca2:	67 0f       	add	r22, r23
    1ca4:	78 1f       	adc	r23, r24
    1ca6:	89 1f       	adc	r24, r25
    1ca8:	9a 1f       	adc	r25, r26
    1caa:	a1 1d       	adc	r26, r1
    1cac:	68 0f       	add	r22, r24
    1cae:	79 1f       	adc	r23, r25
    1cb0:	8a 1f       	adc	r24, r26
    1cb2:	91 1d       	adc	r25, r1
    1cb4:	a1 1d       	adc	r26, r1
    1cb6:	6a 0f       	add	r22, r26
    1cb8:	71 1d       	adc	r23, r1
    1cba:	81 1d       	adc	r24, r1
    1cbc:	91 1d       	adc	r25, r1
    1cbe:	a1 1d       	adc	r26, r1
    1cc0:	20 d0       	rcall	.+64     	; 0x1d02 <__ultoa_invert+0x84>
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <__ultoa_invert+0x48>
    1cc4:	68 94       	set
    1cc6:	3f 91       	pop	r19
    1cc8:	2a e0       	ldi	r18, 0x0A	; 10
    1cca:	26 9f       	mul	r18, r22
    1ccc:	11 24       	eor	r1, r1
    1cce:	30 19       	sub	r19, r0
    1cd0:	30 5d       	subi	r19, 0xD0	; 208
    1cd2:	31 93       	st	Z+, r19
    1cd4:	de f6       	brtc	.-74     	; 0x1c8c <__ultoa_invert+0xe>
    1cd6:	cf 01       	movw	r24, r30
    1cd8:	08 95       	ret
    1cda:	46 2f       	mov	r20, r22
    1cdc:	47 70       	andi	r20, 0x07	; 7
    1cde:	40 5d       	subi	r20, 0xD0	; 208
    1ce0:	41 93       	st	Z+, r20
    1ce2:	b3 e0       	ldi	r27, 0x03	; 3
    1ce4:	0f d0       	rcall	.+30     	; 0x1d04 <__ultoa_invert+0x86>
    1ce6:	c9 f7       	brne	.-14     	; 0x1cda <__ultoa_invert+0x5c>
    1ce8:	f6 cf       	rjmp	.-20     	; 0x1cd6 <__ultoa_invert+0x58>
    1cea:	46 2f       	mov	r20, r22
    1cec:	4f 70       	andi	r20, 0x0F	; 15
    1cee:	40 5d       	subi	r20, 0xD0	; 208
    1cf0:	4a 33       	cpi	r20, 0x3A	; 58
    1cf2:	18 f0       	brcs	.+6      	; 0x1cfa <__ultoa_invert+0x7c>
    1cf4:	49 5d       	subi	r20, 0xD9	; 217
    1cf6:	31 fd       	sbrc	r19, 1
    1cf8:	40 52       	subi	r20, 0x20	; 32
    1cfa:	41 93       	st	Z+, r20
    1cfc:	02 d0       	rcall	.+4      	; 0x1d02 <__ultoa_invert+0x84>
    1cfe:	a9 f7       	brne	.-22     	; 0x1cea <__ultoa_invert+0x6c>
    1d00:	ea cf       	rjmp	.-44     	; 0x1cd6 <__ultoa_invert+0x58>
    1d02:	b4 e0       	ldi	r27, 0x04	; 4
    1d04:	a6 95       	lsr	r26
    1d06:	97 95       	ror	r25
    1d08:	87 95       	ror	r24
    1d0a:	77 95       	ror	r23
    1d0c:	67 95       	ror	r22
    1d0e:	ba 95       	dec	r27
    1d10:	c9 f7       	brne	.-14     	; 0x1d04 <__ultoa_invert+0x86>
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	61 05       	cpc	r22, r1
    1d16:	71 05       	cpc	r23, r1
    1d18:	08 95       	ret
    1d1a:	9b 01       	movw	r18, r22
    1d1c:	ac 01       	movw	r20, r24
    1d1e:	0a 2e       	mov	r0, r26
    1d20:	06 94       	lsr	r0
    1d22:	57 95       	ror	r21
    1d24:	47 95       	ror	r20
    1d26:	37 95       	ror	r19
    1d28:	27 95       	ror	r18
    1d2a:	ba 95       	dec	r27
    1d2c:	c9 f7       	brne	.-14     	; 0x1d20 <__ultoa_invert+0xa2>
    1d2e:	62 0f       	add	r22, r18
    1d30:	73 1f       	adc	r23, r19
    1d32:	84 1f       	adc	r24, r20
    1d34:	95 1f       	adc	r25, r21
    1d36:	a0 1d       	adc	r26, r0
    1d38:	08 95       	ret

00001d3a <_exit>:
    1d3a:	f8 94       	cli

00001d3c <__stop_program>:
    1d3c:	ff cf       	rjmp	.-2      	; 0x1d3c <__stop_program>
